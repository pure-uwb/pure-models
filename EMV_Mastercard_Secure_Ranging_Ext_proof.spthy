theory EMV_Mastercard_Secure_Ranging_Ext begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, xor
functions: MAC/2, MAC_arpc/2, NEq/2, adec/2, aenc/2, f/2, fst/1, h/1,
           kdf/2, p8/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true















rule (modulo E) Terminal_Bank_Network:
   [ Send( S, R, channelID, msg ) ] --> [ Recv( S, R, channelID, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_Amount_Low:
   [ ] --[ Once( <$amount, 'Amount'> ) ]-> [ !Value( $amount, 'Low' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_Amount_High:
   [ ] --[ Once( <$amount, 'Amount'> ) ]-> [ !Value( $amount, 'High' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_ATC:
   [ Fr( ~ATC ) ] --> [ !ATC( ~ATC ), Out( ~ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_CA:
   [ Fr( ~privkCA ) ]
  --[ Once( $CA ), Role( $CA, 'CA' ) ]->
   [
   !LtkCA( $CA, ~privkCA ),
   !CertCA( $CA,
            <<'01', $CA, pk(~privkCA), $CA>, 
             sign(<'01', $CA, pk(~privkCA), $CA>, ~privkCA)>
   ),
   Out( pk(~privkCA) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Bank:
   [ Fr( ~privkBank ), !LtkCA( $CA, ~privkCA ) ]
  --[ Once( $Bank ), Role( $Bank, 'Bank' ) ]->
   [
   !LtkBank( $Bank, ~privkBank ),
   !CertBank( $Bank,
              <<'02', $Bank, pk(~privkBank), $CA>, 
               sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)>
   ),
   !IssuingCA( $Bank, $CA ), Out( pk(~privkBank) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_CA:
   [ !LtkCA( $CA, ~privkCA ) ] --[ Compromise( $CA ) ]-> [ Out( ~privkCA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Bank:
   [ !LtkBank( $Bank, ~privkBank ) ]
  --[ Compromise( $Bank ) ]->
   [ Out( <$Bank, ~privkBank> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Card:
   [ !LtkCard( ~PAN, ~privkCard ) ]
  --[ Compromise( ~PAN ) ]->
   [ Out( <~PAN, ~privkCard> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Bank_Card_ShK:
   [ !IssuingBank( ~PAN, $Bank ), !Shk( ~PAN, ~MK ) ]
  --[ Compromise( $Bank ), Compromise( ~PAN ) ]->
   [ Out( ~MK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_PIN:
   [ Fr( ~PIN ), Set_PIN( ~PAN, CVM, $CA, $Bank ) ]
  --[
  NEq( CVM, 'NoPIN' ), SecretPIN( ~PIN ), Honest( $CA ), Honest( $Bank ),
  Honest( ~PAN )
  ]->
   [
   !PIN( ~PAN, ~PIN ), !Entered_PIN( ~PAN, ~PIN ),
   !Entered_PIN( ~PAN, 'WrongPIN' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Card:
   [
   Fr( ~PAN ), Fr( ~expDate ), Fr( ~MK ), !LtkBank( $Bank, ~privkBank ),
   !CertBank( $Bank, certBank ), !IssuingCA( $Bank, $CA ),
   In( <auth, CVM, ODCVM> )
   ]
  --[
  Role( ~PAN, 'Card' ), SecretPAN( ~PAN ), SecretMK( ~MK ), Honest( $CA ),
  Honest( $Bank ), Honest( ~PAN )
  ]->
   [
   !AIP( ~PAN, <auth, ODCVM, $furtherData> ), !AID( ~PAN, 'Mastercard' ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ),
   Set_Records( ~PAN, ~expDate, $CA, certBank,
                sign(<'03', ~PAN, ~expDate, auth, ODCVM, $furtherData>, ~privkBank), CVM
   ),
   Set_PIN( ~PAN, CVM, $CA, $Bank )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_Records_SDA:
   [
   Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM ),
   !AIP( ~PAN, <'SDA', furtherData> )
   ]
  -->
   [ !Records( ~PAN, <~PAN, ~expDate, $CA, certBank, SSAD, CVM> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Set_Records_NotSDA:
   [
   Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM ),
   Fr( ~privkCard ), !AIP( ~PAN, AIP ), !IssuingBank( ~PAN, $Bank ),
   !LtkBank( $Bank, ~privkBank )
   ]
  --[
  NEq( fst(AIP), 'SDA' ), SecretPrivkCard( ~privkCard ), Honest( $CA ),
  Honest( $Bank ), Honest( ~PAN )
  ]->
   [
   Out( pk(~privkCard) ), !LtkCard( ~PAN, ~privkCard ),
   !Records( ~PAN,
             <~PAN, ~expDate, $CA, certBank, 
              <<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, 
               sign(<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, ~privkBank)>, 
              CVM>
   )
   ]

  /*
  rule (modulo AC) Set_Records_NotSDA:
     [
     Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM ),
     Fr( ~privkCard ), !AIP( ~PAN, AIP ), !IssuingBank( ~PAN, $Bank ),
     !LtkBank( $Bank, ~privkBank )
     ]
    --[
    NEq( z, 'SDA' ), SecretPrivkCard( ~privkCard ), Honest( $CA ),
    Honest( $Bank ), Honest( ~PAN )
    ]->
     [
     Out( pk(~privkCard) ), !LtkCard( ~PAN, ~privkCard ),
     !Records( ~PAN,
               <~PAN, ~expDate, $CA, certBank, 
                <<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, 
                 sign(<'04', ~PAN, pk(~privkCard), $Bank, CVM, AIP>, ~privkBank)>, 
                CVM>
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.14
       z     = fst(AIP.14)
    
    2. AIP   = <z.17, x.21>
       z     = z.17
  */

rule (modulo E) Terminal_Sends_GPO:
   [ Fr( ~UN ), !Value( $amount, value ) ]
  --[ OneTerminal( ), Role( $Terminal, 'Terminal' ) ]->
   [
   Out( <'GET_PROCESSING_OPTIONS', $amount, 'Switzerland', 'CHF', 'YYMMDD', 
         'Purchase', ~UN>
   ),
   Terminal_Sent_GPO( $Terminal,
                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GPO:
   [
   In( <'GET_PROCESSING_OPTIONS', PDOL> ), !AIP( ~PAN, AIP ),
   !AID( ~PAN, 'Mastercard' ), !ATC( ATC )
   ]
  --[ OneCard( ), Once( <~PAN, ATC, 'Card'> ) ]->
   [ Out( <AIP, 'AFL'> ), Card_Responded_To_GPO( ~PAN, PDOL, ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Ext_Sends_Hello:
   [
   Terminal_Sent_GPO( $Terminal, PDOL ), In( <AIP, 'AFL'> ),
   Fr( ~Terminal_Eph_Sk )
   ]
  -->
   [
   Terminal_Ext_Sent_Hello( $Terminal, PDOL, AIP,
                            <'g'^~Terminal_Eph_Sk, ~Terminal_Eph_Sk>
   ),
   Out( <'EXT_HELLO', 'g'^~Terminal_Eph_Sk> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Ext_Responds_To_Hello:
   [
   In( <'EXT_HELLO', Terminal_Eph_Pk> ),
   Card_Responded_To_GPO( ~PAN, PDOL, ATC ), Fr( ~Card_Eph_Sk )
   ]
  -->
   [
   Out( <'EXT_HELLO', 'g'^~Card_Eph_Sk, 
         MAC(kdf(Terminal_Eph_Pk^~Card_Eph_Sk, 'MAC_CARD_TO_READER'),
             <Terminal_Eph_Pk, 'g'^~Card_Eph_Sk>)
        >
   ),
   Card_Responded_To_Hello( ~PAN, PDOL, ATC,
                            <'g'^~Card_Eph_Sk, Terminal_Eph_Pk, Terminal_Eph_Pk^~Card_Eph_Sk>
   )
   ]

  /*
  rule (modulo AC) Card_Ext_Responds_To_Hello:
     [
     In( <'EXT_HELLO', Terminal_Eph_Pk> ),
     Card_Responded_To_GPO( ~PAN, PDOL, ATC ), Fr( ~Card_Eph_Sk )
     ]
    -->
     [
     Out( <'EXT_HELLO', 'g'^~Card_Eph_Sk, 
           MAC(kdf(z, 'MAC_CARD_TO_READER'), <Terminal_Eph_Pk, 'g'^~Card_Eph_Sk>)>
     ),
     Card_Responded_To_Hello( ~PAN, PDOL, ATC,
                              <'g'^~Card_Eph_Sk, Terminal_Eph_Pk, z>
     )
     ]
    variants (modulo AC)
    1. ~Card_Eph_Sk
             = ~Card_Eph_Sk.14
       Terminal_Eph_Pk
             = Terminal_Eph_Pk.18
       z     = Terminal_Eph_Pk.18^~Card_Eph_Sk.14
    
    2. ~Card_Eph_Sk
             = ~Card_Eph_Sk.17
       Terminal_Eph_Pk
             = z.24^inv(~Card_Eph_Sk.17)
       z     = z.24
    
    3. ~Card_Eph_Sk
             = ~Card_Eph_Sk.67
       Terminal_Eph_Pk
             = x.131^x.132
       z     = x.131^(~Card_Eph_Sk.67*x.132)
    
    4. ~Card_Eph_Sk
             = ~Card_Eph_Sk.71
       Terminal_Eph_Pk
             = x.139^inv((~Card_Eph_Sk.71*x.140))
       z     = x.139^inv(x.140)
    
    5. ~Card_Eph_Sk
             = ~Card_Eph_Sk.71
       Terminal_Eph_Pk
             = x.139^(x.140*inv(~Card_Eph_Sk.71))
       z     = x.139^x.140
    
    6. ~Card_Eph_Sk
             = ~Card_Eph_Sk.72
       Terminal_Eph_Pk
             = x.140^(x.141*inv((~Card_Eph_Sk.72*x.142)))
       z     = x.140^(x.141*inv(x.142))
    
    7. Terminal_Eph_Pk
             = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Terminal_Ext_Receives_Hello:
   [
   Terminal_Ext_Sent_Hello( $Terminal, PDOL, AIP,
                            <Terminal_Eph_Pk, ~Terminal_Eph_Sk>
   ),
   In( <'EXT_HELLO', Card_Eph_Pk, mac_c> )
   ]
  --[
  Eq( mac_c,
      MAC(kdf(Card_Eph_Pk^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
          <Terminal_Eph_Pk, Card_Eph_Pk>)
  ),
  Terminal_Ext_Sent_Hello_dgb( $Terminal, PDOL, AIP,
                               <Terminal_Eph_Pk, ~Terminal_Eph_Sk>
  )
  ]->
   [
   Terminal_Ext_Received_Hello( $Terminal, PDOL, AIP,
                                <Card_Eph_Pk, Terminal_Eph_Pk, Card_Eph_Pk^~Terminal_Eph_Sk>
   )
   ]

  /*
  rule (modulo AC) Terminal_Ext_Receives_Hello:
     [
     Terminal_Ext_Sent_Hello( $Terminal, PDOL, AIP,
                              <Terminal_Eph_Pk, ~Terminal_Eph_Sk>
     ),
     In( <'EXT_HELLO', Card_Eph_Pk, mac_c> )
     ]
    --[
    Eq( mac_c,
        MAC(kdf(z, 'MAC_CARD_TO_READER'), <Terminal_Eph_Pk, Card_Eph_Pk>)
    ),
    Terminal_Ext_Sent_Hello_dgb( $Terminal, PDOL, AIP,
                                 <Terminal_Eph_Pk, ~Terminal_Eph_Sk>
    )
    ]->
     [
     Terminal_Ext_Received_Hello( $Terminal, PDOL, AIP,
                                  <Card_Eph_Pk, Terminal_Eph_Pk, z>
     )
     ]
    variants (modulo AC)
    1. ~Terminal_Eph_Sk
             = ~Terminal_Eph_Sk.13
       Card_Eph_Pk
             = Card_Eph_Pk.15
       z     = Card_Eph_Pk.15^~Terminal_Eph_Sk.13
    
    2. ~Terminal_Eph_Sk
             = ~Terminal_Eph_Sk.18
       Card_Eph_Pk
             = z.25^inv(~Terminal_Eph_Sk.18)
       z     = z.25
    
    3. ~Terminal_Eph_Sk
             = ~Terminal_Eph_Sk.21
       Card_Eph_Pk
             = x.38^x.39
       z     = x.38^(~Terminal_Eph_Sk.21*x.39)
    
    4. ~Terminal_Eph_Sk
             = ~Terminal_Eph_Sk.23
       Card_Eph_Pk
             = x.42^inv((~Terminal_Eph_Sk.23*x.43))
       z     = x.42^inv(x.43)
    
    5. ~Terminal_Eph_Sk
             = ~Terminal_Eph_Sk.23
       Card_Eph_Pk
             = x.42^(x.43*inv(~Terminal_Eph_Sk.23))
       z     = x.42^x.43
    
    6. ~Terminal_Eph_Sk
             = ~Terminal_Eph_Sk.24
       Card_Eph_Pk
             = x.43^(x.44*inv((~Terminal_Eph_Sk.24*x.45)))
       z     = x.43^(x.44*inv(x.45))
    
    7. Card_Eph_Pk
             = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) Card_Ranging:
   [ Card_Responded_To_Hello( ~PAN_c, PDOL_c, ATC_c, DH_c ), Fr( ~t ) ]
  -->
   [ Card_Performed_Ranging( ~PAN_c, PDOL_c, ATC_c, DH_c, ~t ), Out( ~t ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Ranging:
   [
   Terminal_Ext_Received_Hello( $Terminal_t, PDOL_t, AIP_t, DH_t ), In( t )
   ]
  -->
   [ Terminal_Performed_Ranging( $Terminal_t, PDOL_t, AIP_t, DH_t, t ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_ReadRecord:
   [ Terminal_Performed_Ranging( $Terminal, PDOL, AIP, DH, t ) ]
  -->
   [
   Out( <'READ_RECORD', 'AFL'> ),
   Terminal_Sent_ReadRecord( $Terminal, PDOL, AIP, DH, t )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_ReadRecord_NotDDA:
   [
   Card_Performed_Ranging( ~PAN, PDOL, ATC, DH, t ), !AIP( ~PAN, AIP ),
   !Records( ~PAN, records ), In( <'READ_RECORD', 'AFL'> )
   ]
  --[ NEq( fst(AIP), 'DDA' ) ]->
   [ Out( records ), Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, DH, t ) ]

  /*
  rule (modulo AC) Card_Responds_To_ReadRecord_NotDDA:
     [
     Card_Performed_Ranging( ~PAN, PDOL, ATC, DH, t ), !AIP( ~PAN, AIP ),
     !Records( ~PAN, records ), In( <'READ_RECORD', 'AFL'> )
     ]
    --[ NEq( z, 'DDA' ) ]->
     [ Out( records ), Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, DH, t ) ]
    variants (modulo AC)
    1. AIP   = AIP.12
       z     = fst(AIP.12)
    
    2. AIP   = <z.17, x.23>
       z     = z.17
  */

rule (modulo E) Card_Responds_To_ReadRecord_DDA:
   [
   Card_Performed_Ranging( ~PAN, PDOL, ATC, DH, t ),
   !Records( ~PAN, records ), !AIP( ~PAN, <'DDA', furtherData> ),
   In( <'READ_RECORD', 'AFL'> )
   ]
  -->
   [ Out( records ), Card_Ready_For_DDA( ~PAN, PDOL, ATC, DH, t ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_Records_SDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'SDA', furtherData>, DH, t ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, SSAD, CVM
       >
   ),
   !IssuingCA( $Bank, $CA ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(SSAD, <'03', ~PAN, expDate, 'SDA', furtherData>, pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'SDA', furtherData>, DH, pubkBank, 'Null', CVM, t
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_SDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'SDA', furtherData>, DH, t ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, SSAD, CVM
         >
     ),
     !IssuingCA( $Bank, $CA ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'SDA', furtherData>, DH, pubkBank, 'Null', CVM, t
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.37
       $CA   = $CA.38
       ~PAN  = ~PAN.40
       SSAD  = SSAD.44
       expDate
             = expDate.45
       furtherData
             = furtherData.46
       pubkBank
             = pubkBank.47
       pubkCA
             = pubkCA.48
       sign1 = sign1.49
       sign2 = sign2.50
       z     = verify(sign1.49, <'01', $CA.38, pubkCA.48, $CA.38>, pubkCA.48)
       z.1   = verify(sign2.50, <'02', $Bank.37, pubkBank.47, $CA.38>,
                      pubkCA.48)
       z.2   = verify(SSAD.44,
                      <'03', ~PAN.40, expDate.45, 'SDA', furtherData.46>, pubkBank.47)
    
    2. $Bank = $Bank.96
       $CA   = $CA.97
       ~PAN  = ~PAN.99
       SSAD  = sign(<'03', ~PAN.99, expDate.104, 'SDA', furtherData.105>, x.190)
       expDate
             = expDate.104
       furtherData
             = furtherData.105
       pubkBank
             = pk(x.190)
       pubkCA
             = pubkCA.107
       sign1 = sign1.108
       sign2 = sign2.109
       z     = verify(sign1.108, <'01', $CA.97, pubkCA.107, $CA.97>, pubkCA.107)
       z.1   = verify(sign2.109, <'02', $Bank.96, pk(x.190), $CA.97>,
                      pubkCA.107)
       z.2   = true
    
    3. $Bank = $Bank.99
       $CA   = $CA.100
       ~PAN  = ~PAN.102
       SSAD  = sign(<'03', ~PAN.102, expDate.107, 'SDA', furtherData.108>,
                    x.195)
       expDate
             = expDate.107
       furtherData
             = furtherData.108
       pubkBank
             = pk(x.195)
       pubkCA
             = pk(x.196)
       sign1 = sign(<'01', $CA.100, pk(x.196), $CA.100>, x.196)
       sign2 = sign2.112
       z     = true
       z.1   = verify(sign2.112, <'02', $Bank.99, pk(x.195), $CA.100>,
                      pk(x.196))
       z.2   = true
    
    4. $Bank = $Bank.100
       $CA   = $CA.101
       ~PAN  = ~PAN.103
       SSAD  = SSAD.107
       expDate
             = expDate.108
       furtherData
             = furtherData.109
       pubkBank
             = pubkBank.110
       pubkCA
             = pk(x.198)
       sign1 = sign(<'01', $CA.101, pk(x.198), $CA.101>, x.198)
       sign2 = sign2.113
       z     = true
       z.1   = verify(sign2.113, <'02', $Bank.100, pubkBank.110, $CA.101>,
                      pk(x.198))
       z.2   = verify(SSAD.107,
                      <'03', ~PAN.103, expDate.108, 'SDA', furtherData.109>, pubkBank.110)
    
    5. $Bank = $Bank.100
       $CA   = $CA.101
       ~PAN  = ~PAN.103
       SSAD  = sign(<'03', ~PAN.103, expDate.108, 'SDA', furtherData.109>,
                    x.197)
       expDate
             = expDate.108
       furtherData
             = furtherData.109
       pubkBank
             = pk(x.197)
       pubkCA
             = pk(x.198)
       sign1 = sign1.112
       sign2 = sign(<'02', $Bank.100, pk(x.197), $CA.101>, x.198)
       z     = verify(sign1.112, <'01', $CA.101, pk(x.198), $CA.101>, pk(x.198))
       z.1   = true
       z.2   = true
    
    6. $Bank = $Bank.100
       $CA   = $CA.101
       ~PAN  = ~PAN.103
       SSAD  = sign(<'03', ~PAN.103, expDate.108, 'SDA', furtherData.109>,
                    x.197)
       expDate
             = expDate.108
       furtherData
             = furtherData.109
       pubkBank
             = pk(x.197)
       pubkCA
             = pk(x.198)
       sign1 = sign(<'01', $CA.101, pk(x.198), $CA.101>, x.198)
       sign2 = sign(<'02', $Bank.100, pk(x.197), $CA.101>, x.198)
       z     = true
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.101
       $CA   = $CA.102
       ~PAN  = ~PAN.104
       SSAD  = SSAD.108
       expDate
             = expDate.109
       furtherData
             = furtherData.110
       pubkBank
             = pubkBank.111
       pubkCA
             = pk(x.200)
       sign1 = sign1.113
       sign2 = sign(<'02', $Bank.101, pubkBank.111, $CA.102>, x.200)
       z     = verify(sign1.113, <'01', $CA.102, pk(x.200), $CA.102>, pk(x.200))
       z.1   = true
       z.2   = verify(SSAD.108,
                      <'03', ~PAN.104, expDate.109, 'SDA', furtherData.110>, pubkBank.111)
    
    8. $Bank = $Bank.101
       $CA   = $CA.102
       ~PAN  = ~PAN.104
       SSAD  = SSAD.108
       expDate
             = expDate.109
       furtherData
             = furtherData.110
       pubkBank
             = pubkBank.111
       pubkCA
             = pk(x.200)
       sign1 = sign(<'01', $CA.102, pk(x.200), $CA.102>, x.200)
       sign2 = sign(<'02', $Bank.101, pubkBank.111, $CA.102>, x.200)
       z     = true
       z.1   = true
       z.2   = verify(SSAD.108,
                      <'03', ~PAN.104, expDate.109, 'SDA', furtherData.110>, pubkBank.111)
  */

rule (modulo E) Terminal_Receives_Records_CDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'CDA', furtherData>, DH, t ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
        <<'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>, sign3>, CVM>
   ),
   !IssuingCA( $Bank, $CA ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(sign3, <'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>,
             pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'CDA', furtherData>, DH, pubkBank, pubkCard, CVM, t
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_CDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'CDA', furtherData>, DH, t ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
          <<'04', ~PAN, pubkCard, $Bank, CVM, 'CDA', furtherData>, sign3>, CVM>
     ),
     !IssuingCA( $Bank, $CA ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'CDA', furtherData>, DH, pubkBank, pubkCard, CVM, t
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.39
       $CA   = $CA.40
       ~PAN  = ~PAN.42
       CVM   = CVM.43
       furtherData
             = furtherData.47
       pubkBank
             = pubkBank.48
       pubkCA
             = pubkCA.49
       pubkCard
             = pubkCard.50
       sign1 = sign1.51
       sign2 = sign2.52
       sign3 = sign3.53
       z     = verify(sign1.51, <'01', $CA.40, pubkCA.49, $CA.40>, pubkCA.49)
       z.1   = verify(sign2.52, <'02', $Bank.39, pubkBank.48, $CA.40>,
                      pubkCA.49)
       z.2   = verify(sign3.53,
                      <'04', ~PAN.42, pubkCard.50, $Bank.39, CVM.43, 'CDA', furtherData.47>,
                      pubkBank.48)
    
    2. $Bank = $Bank.103
       $CA   = $CA.104
       ~PAN  = ~PAN.106
       CVM   = CVM.107
       furtherData
             = furtherData.111
       pubkBank
             = pubkBank.112
       pubkCA
             = pk(x.204)
       pubkCard
             = pubkCard.114
       sign1 = sign(<'01', $CA.104, pk(x.204), $CA.104>, x.204)
       sign2 = sign2.116
       sign3 = sign3.117
       z     = true
       z.1   = verify(sign2.116, <'02', $Bank.103, pubkBank.112, $CA.104>,
                      pk(x.204))
       z.2   = verify(sign3.117,
                      <'04', ~PAN.106, pubkCard.114, $Bank.103, CVM.107, 'CDA', furtherData.111
                      >,
                      pubkBank.112)
    
    3. $Bank = $Bank.103
       $CA   = $CA.104
       ~PAN  = ~PAN.106
       CVM   = CVM.107
       furtherData
             = furtherData.111
       pubkBank
             = pk(x.204)
       pubkCA
             = pubkCA.113
       pubkCard
             = pubkCard.114
       sign1 = sign1.115
       sign2 = sign2.116
       sign3 = sign(<'04', ~PAN.106, pubkCard.114, $Bank.103, CVM.107, 'CDA', 
                     furtherData.111>,
                    x.204)
       z     = verify(sign1.115, <'01', $CA.104, pubkCA.113, $CA.104>,
                      pubkCA.113)
       z.1   = verify(sign2.116, <'02', $Bank.103, pk(x.204), $CA.104>,
                      pubkCA.113)
       z.2   = true
    
    4. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pubkBank.113
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign1.116
       sign2 = sign(<'02', $Bank.104, pubkBank.113, $CA.105>, x.206)
       sign3 = sign3.118
       z     = verify(sign1.116, <'01', $CA.105, pk(x.206), $CA.105>, pk(x.206))
       z.1   = true
       z.2   = verify(sign3.118,
                      <'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'CDA', furtherData.112
                      >,
                      pubkBank.113)
    
    5. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pubkBank.113
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign(<'01', $CA.105, pk(x.206), $CA.105>, x.206)
       sign2 = sign(<'02', $Bank.104, pubkBank.113, $CA.105>, x.206)
       sign3 = sign3.118
       z     = true
       z.1   = true
       z.2   = verify(sign3.118,
                      <'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'CDA', furtherData.112
                      >,
                      pubkBank.113)
    
    6. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pk(x.205)
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign1.116
       sign2 = sign(<'02', $Bank.104, pk(x.205), $CA.105>, x.206)
       sign3 = sign(<'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'CDA', 
                     furtherData.112>,
                    x.205)
       z     = verify(sign1.116, <'01', $CA.105, pk(x.206), $CA.105>, pk(x.206))
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pk(x.205)
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign(<'01', $CA.105, pk(x.206), $CA.105>, x.206)
       sign2 = sign2.117
       sign3 = sign(<'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'CDA', 
                     furtherData.112>,
                    x.205)
       z     = true
       z.1   = verify(sign2.117, <'02', $Bank.104, pk(x.205), $CA.105>,
                      pk(x.206))
       z.2   = true
    
    8. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pk(x.205)
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign(<'01', $CA.105, pk(x.206), $CA.105>, x.206)
       sign2 = sign(<'02', $Bank.104, pk(x.205), $CA.105>, x.206)
       sign3 = sign(<'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'CDA', 
                     furtherData.112>,
                    x.205)
       z     = true
       z.1   = true
       z.2   = true
  */

rule (modulo E) Terminal_Receives_Records_DDA:
   [
   Terminal_Sent_ReadRecord( $Terminal, PDOL, <'DDA', furtherData>, DH, t ),
   !IssuingCA( $Bank, $CA ),
   In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
        <<'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>, sign3>, CVM>
   ),
   !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
   ]
  --[
  Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true ),
  Eq( verify(sign2, <'02', $Bank, pubkBank, $CA>, pubkCA), true ),
  Eq( verify(sign3, <'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>,
             pubkBank),
      true
  )
  ]->
   [
   Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA, PDOL,
                           <'DDA', furtherData>, DH, pubkBank, pubkCard, CVM, t
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_Records_DDA:
     [
     Terminal_Sent_ReadRecord( $Terminal, PDOL, <'DDA', furtherData>, DH, t ),
     !IssuingCA( $Bank, $CA ),
     In( <~PAN, expDate, $CA, <<'02', $Bank, pubkBank, $CA>, sign2>, 
          <<'04', ~PAN, pubkCard, $Bank, CVM, 'DDA', furtherData>, sign3>, CVM>
     ),
     !CertCA( $CA, <<'01', $CA, pubkCA, $CA>, sign1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ) ]->
     [
     Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA, PDOL,
                             <'DDA', furtherData>, DH, pubkBank, pubkCard, CVM, t
     )
     ]
    variants (modulo AC)
    1. $Bank = $Bank.39
       $CA   = $CA.40
       ~PAN  = ~PAN.42
       CVM   = CVM.43
       furtherData
             = furtherData.47
       pubkBank
             = pubkBank.48
       pubkCA
             = pubkCA.49
       pubkCard
             = pubkCard.50
       sign1 = sign1.51
       sign2 = sign2.52
       sign3 = sign3.53
       z     = verify(sign1.51, <'01', $CA.40, pubkCA.49, $CA.40>, pubkCA.49)
       z.1   = verify(sign2.52, <'02', $Bank.39, pubkBank.48, $CA.40>,
                      pubkCA.49)
       z.2   = verify(sign3.53,
                      <'04', ~PAN.42, pubkCard.50, $Bank.39, CVM.43, 'DDA', furtherData.47>,
                      pubkBank.48)
    
    2. $Bank = $Bank.103
       $CA   = $CA.104
       ~PAN  = ~PAN.106
       CVM   = CVM.107
       furtherData
             = furtherData.111
       pubkBank
             = pubkBank.112
       pubkCA
             = pk(x.204)
       pubkCard
             = pubkCard.114
       sign1 = sign(<'01', $CA.104, pk(x.204), $CA.104>, x.204)
       sign2 = sign2.116
       sign3 = sign3.117
       z     = true
       z.1   = verify(sign2.116, <'02', $Bank.103, pubkBank.112, $CA.104>,
                      pk(x.204))
       z.2   = verify(sign3.117,
                      <'04', ~PAN.106, pubkCard.114, $Bank.103, CVM.107, 'DDA', furtherData.111
                      >,
                      pubkBank.112)
    
    3. $Bank = $Bank.103
       $CA   = $CA.104
       ~PAN  = ~PAN.106
       CVM   = CVM.107
       furtherData
             = furtherData.111
       pubkBank
             = pk(x.204)
       pubkCA
             = pubkCA.113
       pubkCard
             = pubkCard.114
       sign1 = sign1.115
       sign2 = sign2.116
       sign3 = sign(<'04', ~PAN.106, pubkCard.114, $Bank.103, CVM.107, 'DDA', 
                     furtherData.111>,
                    x.204)
       z     = verify(sign1.115, <'01', $CA.104, pubkCA.113, $CA.104>,
                      pubkCA.113)
       z.1   = verify(sign2.116, <'02', $Bank.103, pk(x.204), $CA.104>,
                      pubkCA.113)
       z.2   = true
    
    4. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pubkBank.113
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign1.116
       sign2 = sign(<'02', $Bank.104, pubkBank.113, $CA.105>, x.206)
       sign3 = sign3.118
       z     = verify(sign1.116, <'01', $CA.105, pk(x.206), $CA.105>, pk(x.206))
       z.1   = true
       z.2   = verify(sign3.118,
                      <'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'DDA', furtherData.112
                      >,
                      pubkBank.113)
    
    5. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pubkBank.113
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign(<'01', $CA.105, pk(x.206), $CA.105>, x.206)
       sign2 = sign(<'02', $Bank.104, pubkBank.113, $CA.105>, x.206)
       sign3 = sign3.118
       z     = true
       z.1   = true
       z.2   = verify(sign3.118,
                      <'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'DDA', furtherData.112
                      >,
                      pubkBank.113)
    
    6. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pk(x.205)
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign1.116
       sign2 = sign(<'02', $Bank.104, pk(x.205), $CA.105>, x.206)
       sign3 = sign(<'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'DDA', 
                     furtherData.112>,
                    x.205)
       z     = verify(sign1.116, <'01', $CA.105, pk(x.206), $CA.105>, pk(x.206))
       z.1   = true
       z.2   = true
    
    7. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pk(x.205)
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign(<'01', $CA.105, pk(x.206), $CA.105>, x.206)
       sign2 = sign2.117
       sign3 = sign(<'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'DDA', 
                     furtherData.112>,
                    x.205)
       z     = true
       z.1   = verify(sign2.117, <'02', $Bank.104, pk(x.205), $CA.105>,
                      pk(x.206))
       z.2   = true
    
    8. $Bank = $Bank.104
       $CA   = $CA.105
       ~PAN  = ~PAN.107
       CVM   = CVM.108
       furtherData
             = furtherData.112
       pubkBank
             = pk(x.205)
       pubkCA
             = pk(x.206)
       pubkCard
             = pubkCard.115
       sign1 = sign(<'01', $CA.105, pk(x.206), $CA.105>, x.206)
       sign2 = sign(<'02', $Bank.104, pk(x.205), $CA.105>, x.206)
       sign3 = sign(<'04', ~PAN.107, pubkCard.115, $Bank.104, CVM.108, 'DDA', 
                     furtherData.112>,
                    x.205)
       z     = true
       z.1   = true
       z.2   = true
  */

rule (modulo E) Terminal_Sends_InternalAuthenticate:
   [
   Terminal_Ready_For_DDA( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                           pubkCard, CVM, t
   )
   ]
  -->
   [
   Out( <'INTERNAL_AUTHENTICATE', ~UN> ),
   Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                       <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                                       pubkCard, CVM, t
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_InternalAuthenticate:
   [
   Card_Ready_For_DDA( ~PAN, PDOL, ATC, DH, t ), Fr( ~nc ),
   !LtkCard( ~PAN, ~privkCard ), In( <'INTERNAL_AUTHENTICATE', DDOL> )
   ]
  -->
   [
   Out( <~nc, sign(<'05', ~nc, DDOL>, ~privkCard)> ),
   Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, DH, t )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_InternalAuthenticate_Response:
   [
   Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                       <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                                       pubkCard, CVM, t
   ),
   In( <nc, SDAD> )
   ]
  --[ Eq( verify(SDAD, <'05', nc, ~UN>, pubkCard), true ) ]->
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                           pubkCard, CVM, t
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_InternalAuthenticate_Response:
     [
     Terminal_Sent_InternalAuthenticate( $Terminal, ~PAN, $Bank, $CA,
                                         <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                                         pubkCard, CVM, t
     ),
     In( <nc, SDAD> )
     ]
    --[ Eq( z, true ) ]->
     [
     Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                             <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                             pubkCard, CVM, t
     )
     ]
    variants (modulo AC)
    1. ~UN   = ~UN.20
       SDAD  = SDAD.20
       nc    = nc.20
       pubkCard
             = pubkCard.20
       z     = verify(SDAD.20, <'05', nc.20, ~UN.20>, pubkCard.20)
    
    2. ~UN   = ~x.20
       SDAD  = sign(<'05', x.24, ~x.20>, x.25)
       nc    = x.24
       pubkCard
             = pk(x.25)
       z     = true
  */

rule (modulo E) Terminal_Processes_CVM_NoPIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                           pubkCard, CVM, t
   ),
   !Value( $amount, 'Low' )
   ]
  -->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA,
                                  <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                                  pubkCard, 'NoPIN', 'Null', CVM, t
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_OnlinePIN:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                           pubkCard, 'OnlinePIN', t
   ),
   !Entered_PIN( ~PAN, PIN ), !Value( $amount, 'High' )
   ]
  -->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA,
                                  <$amount, country, currency, date, type, ~UN>, AIP, DH, pubkBank,
                                  pubkCard, 'OnlinePIN', aenc(PIN, pubkBank), 'OnlinePIN', t
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Processes_CVM_ODCVM:
   [
   Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                           <$amount, country, currency, date, type, ~UN>,
                           <auth, 'ODCVM', furtherData2>, DH, pubkBank, pubkCard, CVM, t
   ),
   !Value( $amount, 'High' )
   ]
  --[ ODCVM_Terminal( ~PAN ) ]->
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA,
                                  <$amount, country, currency, date, type, ~UN>,
                                  <auth, 'ODCVM', furtherData2>, DH, pubkBank, pubkCard, 'ODCVM', 'Null',
                                  CVM, t
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_GenerateAC_NoCDA:
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                  DH, pubkBank, pubkCard, CVM, encPIN, supportedCVM, t
   ),
   In( acType )
   ]
  --[ NEq( fst(AIP), 'CDA' ) ]->
   [
   Out( <'GENERATE_AC', acType, 'NoCDA', 'TVR', CVM, 'HHMMSS'> ),
   Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                   <PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, DH, pubkBank, pubkCard, CVM, encPIN,
                                   acType, supportedCVM, t
   )
   ]

  /*
  rule (modulo AC) Terminal_Sends_GenerateAC_NoCDA:
     [
     Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL, AIP,
                                    DH, pubkBank, pubkCard, CVM, encPIN, supportedCVM, t
     ),
     In( acType )
     ]
    --[ NEq( z, 'CDA' ) ]->
     [
     Out( <'GENERATE_AC', acType, 'NoCDA', 'TVR', CVM, 'HHMMSS'> ),
     Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                     <PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, DH, pubkBank, pubkCard, CVM, encPIN,
                                     acType, supportedCVM, t
     )
     ]
    variants (modulo AC)
    1. AIP   = AIP.21
       z     = fst(AIP.21)
    
    2. AIP   = <z.30, x.40>
       z     = z.30
  */

rule (modulo E) Terminal_Sends_GenerateAC_CDA:
   [
   Terminal_Ready_For_Cryptogram( $Terminal, ~PAN, $Bank, $CA, PDOL,
                                  <'CDA', furtherData>, DH, pubkBank, pubkCard, CVM, encPIN, supportedCVM,
                                  t
   ),
   In( acType )
   ]
  -->
   [
   Out( <'GENERATE_AC', acType, 'CDA', 'TVR', CVM, 'HHMMSS'> ),
   Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                 <PDOL, 'TVR', CVM, 'HHMMSS'>, <'CDA', furtherData>, DH, pubkBank,
                                 pubkCard, CVM, encPIN, acType, supportedCVM, t
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GenerateAC_NoCDA:
   [
   Card_Ready_For_Cryptogram( ~PAN, PDOL, ATC, DH, t ), !AIP( ~PAN, AIP ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ),
   In( <'GENERATE_AC', CID, 'NoCDA', 'TVR', CVM, 'HHMMSS'> )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, AIP, CVM, <PDOL, 'TVR', CVM, 'HHMMSS'>, ATC, 
            DH, t, 
            MAC(f(~MK, ATC), <<PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, ATC, 'IAD', CID>), 
            'IAD', CID>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, AIP, CVM, <PDOL, 'TVR', CVM, 'HHMMSS'>, ATC, DH, 
            t, 
            MAC(f(~MK, ATC), <<PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, ATC, 'IAD', CID>), 
            'IAD', CID>
  )
  ]->
   [
   Out( <CID, ATC, 
         MAC(f(~MK, ATC), <<PDOL, 'TVR', CVM, 'HHMMSS'>, AIP, ATC, 'IAD', CID>), 
         'IAD', CID>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GenerateAC_CDA:
   [
   Card_Ready_For_Cryptogram( ~PAN,
                              <amount, country, currency, date, type, UN>, ATC,
                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t
   ),
   !LtkCard( ~PAN, ~privkCard ), !AIP( ~PAN, <'CDA', furtherData> ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank ), Fr( ~nc ),
   In( <'GENERATE_AC', CID, 'CDA', 'TVR', CVM, 'HHMMSS'> )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
            ATC, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, 
            MAC(f(~MK, ATC),
                <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                 <'CDA', furtherData>, ATC, 'IAD', CID>), 
            'IAD', CID>
  ),
  Running( ~PAN, $Bank,
           <'Card', 'Bank', ~PAN, <'CDA', furtherData>, CVM, 
            <<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
            ATC, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, 
            MAC(f(~MK, ATC),
                <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                 <'CDA', furtherData>, ATC, 'IAD', CID>), 
            'IAD', CID>
  ),
  Running_DH( ~PAN, 'Terminal', <Card_Eph_Pk, Terminal_Eph_Pk, Secret> )
  ]->
   [
   Out( <CID, ATC, 
         MAC(f(~MK, ATC),
             <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
              <'CDA', furtherData>, ATC, 'IAD', CID>), 
         <~nc, 
          sign(<'05', ~nc, CID, 
                MAC(f(~MK, ATC),
                    <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                     <'CDA', furtherData>, ATC, 'IAD', CID>), 
                h(<<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                   CID, ATC, 
                   MAC(f(~MK, ATC),
                       <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                        <'CDA', furtherData>, ATC, 'IAD', CID>), 
                   <'IAD', CID>, <Terminal_Eph_Pk, Card_Eph_Pk>, t>), 
                UN>,
               ~privkCard)
         >, 
         'IAD', CID>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_AC_NoCDA:
   [
   Terminal_Sent_GenerateAC_NoCDA( $Terminal, ~PAN, $Bank, $CA,
                                   <PDOL, CDOL1>, DH, AIP, pubkBank, pubkCard, CVM, encPIN, acType,
                                   supportedCVM, t
   ),
   In( <CID, ATC, AC, IAD> ), Fr( ~channelID )
   ]
  --[
  Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, DH, t, AC, IAD>
  )
  ]->
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, 'Null', CID,
                         <~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, DH, t, AC, IAD>, supportedCVM,
                         ~channelID, t
   ),
   Send( $Terminal, $Bank, <~channelID, 'Mastercard', '1'>,
         <<~PAN, AIP, CVM, <PDOL, CDOL1>, ATC, DH, t, AC, IAD>, encPIN>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_AC_CDA:
   [
   Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                 <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP,
                                 <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, pubkBank, pubkCard, CVM, encPIN,
                                 acType, supportedCVM, t
   ),
   In( <CID, ATC, AC, <nc, SDAD>, IAD> ), Fr( ~channelID )
   ]
  --[
  Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
  Eq( verify(SDAD,
             <'05', nc, CID, AC, 
              h(<<<$amount, country, currency, date, type, ~UN>, CDOL1>, CID, ATC, AC, 
                 IAD, <Terminal_Eph_Pk, Card_Eph_Pk>, t>), 
              ~UN>,
             pubkCard),
      true
  ),
  Running( $Terminal, $Bank,
           <'Terminal', 'Bank', ~PAN, AIP, CVM, 
            <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
            <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>
  )
  ]->
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, CID,
                         <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                          ATC, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                         supportedCVM, ~channelID, t
   ),
   Send( $Terminal, $Bank, <~channelID, 'Mastercard', '1'>,
         <
          <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
           ATC, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>, 
          encPIN>
   )
   ]

  /*
  rule (modulo AC) Terminal_Receives_AC_CDA:
     [
     Terminal_Sent_GenerateAC_CDA( $Terminal, ~PAN, $Bank, $CA,
                                   <<$amount, country, currency, date, type, ~UN>, CDOL1>, AIP,
                                   <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, pubkBank, pubkCard, CVM, encPIN,
                                   acType, supportedCVM, t
     ),
     In( <CID, ATC, AC, <nc, SDAD>, IAD> ), Fr( ~channelID )
     ]
    --[
    Compatible_CID_acType( CID, acType ), Compatible_CID_CVM( CID, CVM ),
    Eq( z, true ),
    Running( $Terminal, $Bank,
             <'Terminal', 'Bank', ~PAN, AIP, CVM, 
              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>
    )
    ]->
     [
     Terminal_Received_AC( $Terminal, $Bank, $CA, nc, CID,
                           <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
                            ATC, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                           supportedCVM, ~channelID, t
     ),
     Send( $Terminal, $Bank, <~channelID, 'Mastercard', '1'>,
           <
            <~PAN, AIP, CVM, <<$amount, country, currency, date, type, ~UN>, CDOL1>, 
             ATC, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>, 
            encPIN>
     )
     ]
    variants (modulo AC)
    1. $amount
             = $amount.59
       ~UN   = ~UN.61
       AC    = AC.63
       ATC   = ATC.65
       CDOL1 = CDOL1.66
       CID   = CID.67
       Card_Eph_Pk
             = Card_Eph_Pk.69
       IAD   = IAD.70
       SDAD  = SDAD.71
       Terminal_Eph_Pk
             = Terminal_Eph_Pk.73
       country
             = country.75
       currency
             = currency.76
       date  = date.77
       nc    = nc.79
       pubkCard
             = pubkCard.81
       t     = t.83
       type  = type.84
       z     = verify(SDAD.71,
                      <'05', nc.79, CID.67, AC.63, 
                       h(<
                          <<$amount.59, country.75, currency.76, date.77, type.84, ~UN.61>, 
                           CDOL1.66>, 
                          CID.67, ATC.65, AC.63, IAD.70, <Terminal_Eph_Pk.73, Card_Eph_Pk.69>, t.83
                         >), 
                       ~UN.61>,
                      pubkCard.81)
    
    2. $amount
             = $amount.146
       ~UN   = ~UN.148
       AC    = AC.150
       ATC   = ATC.152
       CDOL1 = CDOL1.153
       CID   = CID.154
       Card_Eph_Pk
             = Card_Eph_Pk.156
       IAD   = IAD.157
       SDAD  = sign(<'05', nc.166, CID.154, AC.150, 
                     h(<
                        <<$amount.146, country.162, currency.163, date.164, type.171, ~UN.148>, 
                         CDOL1.153>, 
                        CID.154, ATC.152, AC.150, IAD.157, 
                        <Terminal_Eph_Pk.160, Card_Eph_Pk.156>, t.170>), 
                     ~UN.148>,
                    x.287)
       Terminal_Eph_Pk
             = Terminal_Eph_Pk.160
       country
             = country.162
       currency
             = currency.163
       date  = date.164
       nc    = nc.166
       pubkCard
             = pk(x.287)
       t     = t.170
       type  = type.171
       z     = true
  */

rule (modulo E) Terminal_Commits_TC:
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                         <~PAN, <'CDA', furtherData>, CVM, 
                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                         supportedCVM, ~channelID, t
   ),
   !Value( $amount, 'High' )
   ]
  --[
  TerminalAccepts( <~PAN, <'CDA', furtherData>, CVM, 
                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>
  ),
  Secret_Sigma( Secret ),
  Commit_DH( 'Terminal', ~PAN, <Card_Eph_Pk, Terminal_Eph_Pk, Secret> ),
  Commit( 'Terminal', ~PAN,
          <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
           <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>
  ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_AC:
   [
   Recv( $Terminal, $Bank, <channelID, 'Mastercard', '1'>,
         <
          <~PAN, AIP, CVM, X, ATC, DH, t, MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), IAD
          >, 
          encPIN>
   ),
   !Shk( ~PAN, ~MK ), !IssuingBank( ~PAN, $Bank )
   ]
  --[ Once( <~PAN, ATC, 'Bank'> ) ]->
   [
   Bank_Checked_AC( $Bank, $Terminal,
                    <~PAN, AIP, CVM, X, ATC, DH, t, MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), IAD
                    >,
                    encPIN, channelID,
                    MAC_arpc(f(~MK, ATC), (MAC(f(~MK, ATC), <X, AIP, ATC, IAD>)⊕p8('ARC')))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Receives_AC_Failed:
   [
   Recv( $Terminal, $Bank, <channelID, 'Mastercard', '1'>,
         <<~PAN, AIP, CVM, X, ATC, DH, t, AC, IAD>, encPIN>
   ),
   !Shk( ~PAN, ~MK )
   ]
  --[
  NEq( MAC(f(~MK, ATC), <X, AIP, ATC, IAD>), AC ),
  BankDeclines( <~PAN, AIP, CVM, X, ATC, DH, t, AC, IAD> )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Processes_CVM_NotOnlinePIN:
   [
   Bank_Checked_AC( $Bank, $Terminal,
                    <~PAN, AIP, CVM, X, ATC, DH, t, AC, IAD>, 'Null', channelID, ARPC
   )
   ]
  --[
  NEq( CVM, 'OnlinePIN' ),
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, CVM, X, ATC, DH, t, AC, IAD>
  )
  ]->
   [
   Bank_Commits( $Bank, $Terminal, <~PAN, AIP, CVM, X, ATC, DH, t, AC, IAD>,
                 channelID, ARPC
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Commits:
   [
   Bank_Commits( $Bank, $Terminal,
                 <~PAN, <'CDA', furtherData>, CVM, 
                  <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                 >,
                 channelID, ARPC
   ),
   !Value( amount, 'High' ), !IssuingCA( $Bank, $CA )
   ]
  --[
  Commit( $Bank, ~PAN,
          <'Card', 'Bank', ~PAN, <'CDA', furtherData>, CVM, 
           <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
          >
  ),
  Commit( $Bank, $Terminal,
          <'Terminal', 'Bank', ~PAN, <'CDA', furtherData>, CVM, 
           <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
          >
  ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ Send( $Bank, $Terminal, <channelID, 'Mastercard', '2'>, <'ARC', ARPC> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bank_Processes_CVM_OnlinePIN:
   [
   Bank_Checked_AC( $Bank, $Terminal,
                    <~PAN, AIP, 'OnlinePIN', X, ATC, DH, t, AC, IAD>,
                    aenc(PIN, pk(~privkBank)), channelID, ARPC
   ),
   !LtkBank( $Bank, ~privkBank ), !PIN( ~PAN, PIN ), !Shk( ~PAN, ~MK )
   ]
  --[
  Running( $Bank, $Terminal,
           <'Bank', 'Terminal', ~PAN, AIP, 'OnlinePIN', X, ATC, DH, t, AC, IAD>
  )
  ]->
   [
   Bank_Commits( $Bank, $Terminal,
                 <~PAN, AIP, 'OnlinePIN', X, ATC, DH, t, AC, IAD>, channelID, ARPC
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Commits_ARQC:
   [
   Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                         <~PAN, <'CDA', furtherData>, CVM, 
                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                         supportedCVM, ~channelID, t
   ),
   !Value( $amount, 'High' ),
   Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>, <'ARC', ARPC> )
   ]
  --[
  TerminalAccepts( <~PAN, <'CDA', furtherData>, CVM, 
                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>
  ),
  Commit( 'Terminal', ~PAN,
          <'Card', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
           <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>
  ),
  Commit( $Terminal, $Bank,
          <'Bank', 'Terminal', ~PAN, <'CDA', furtherData>, CVM, 
           <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
           <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>
  ),
  Secret_Sigma( Secret ),
  Commit_DH( 'Terminal', ~PAN, <Card_Eph_Pk, Terminal_Eph_Pk, Secret> ),
  Honest( $CA ), Honest( $Bank ), Honest( $Terminal ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction not_equal:
  "∀ a #i. (NEq( a, a ) @ #i) ⇒ (⊥)"
  // safety formula

restriction once:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique_role:
  "∀ A r1 r2 #i #j.
    ((Role( A, r1 ) @ #i) ∧ (Role( A, r2 ) @ #j)) ⇒ (r1 = r2)"
  // safety formula

restriction compatibility:
  "(∀ #i. (Compatible_CID_CVM( 'TC', 'OnlinePIN' ) @ #i) ⇒ (⊥)) ∧
   (∀ #i. (Compatible_CID_acType( 'TC', 'ARQC' ) @ #i) ⇒ (⊥))"
  // safety formula

lemma executable:
  exists-trace
  "∃ Bank PAN t #i #j #k #l.
    (((((((((#i < #j) ∧
            (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i)) ∧
           (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j)) ∧
          (#k < #l)) ∧
         (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k)) ∧
        (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l)) ∧
       (∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b))) ∧
      (∀ #a #b. ((OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b)) ⇒ (#a = #b))) ∧
     (∀ A B r #a #b. ((Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b)) ⇒ (A = B))) ∧
    (¬(∃ A #a. Compromise( A ) @ #a))"
/*
guarded formula characterizing all satisfying traces:
"∃ Bank PAN t #i #j #k #l.
  (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i) ∧
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j) ∧
  (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k) ∧
  (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l)
 ∧
  (#i < #j) ∧
  (#k < #l) ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b) ⇒ #a = #b) ∧
  (∀ A B r #a #b. (Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b) ⇒ A = B) ∧
  (∀ A #a. (Compromise( A ) @ #a) ⇒ ⊥)"
*/
simplify
solve( Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i )
  case Card_Responds_To_GenerateAC_CDA
  solve( !Shk( ~PAN, ~MK ) ▶₃ #i )
    case Create_Card
    solve( !IssuingBank( ~PAN, $Bank ) ▶₄ #i )
      case Create_Card
      solve( Card_Ready_For_Cryptogram( ~PAN,
                                        <amount, country, currency, date, type, UN>, ATC,
                                        <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t
             ) ▶₀ #i )
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !LtkCard( ~PAN, ~privkCard ) ▶₁ #i )
          case Set_Records_NotSDA
          solve( !AIP( ~PAN, <'CDA', furtherData> ) ▶₂ #i )
            case Create_Card
            solve( Commit( 'Terminal', ~PAN,
                           <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                            ~ATC, <'g'^~Card_Eph_Sk, Terminal_Eph_Pk, Secret>, ~t, 
                            MAC(f(~MK, ~ATC),
                                <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #j )
              case Terminal_Commits_ARQC
              solve( Terminal_Received_AC( $Terminal, $Bank.1, $CA, nc.1, 'ARQC',
                                           <~PAN, <'CDA', ODCVM, $furtherData>, CVM, 
                                            <<$amount, country, currency, date, type, ~UN>, 'TVR', CVM, 
                                             'HHMMSS'>, 
                                            ~ATC, <'g'^~Card_Eph_Sk, Terminal_Eph_Pk, Secret>, ~t, 
                                            MAC(f(~MK, ~ATC),
                                                <
                                                 <<$amount, country, currency, date, type, ~UN>, 'TVR', CVM, 
                                                  'HHMMSS'>, 
                                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                            'IAD', CID>,
                                           supportedCVM, ~channelID, ~t
                     ) ▶₀ #j )
                case Terminal_Receives_AC_CDA_case_2
                solve( !KU( MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>)
                       ) @ #vk.46 )
                  case Card_Responds_To_GenerateAC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #j )
                    case Generate_Amount_High
                    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #j )
                      case Terminal_Bank_Network_case_2
                      solve( Running( ~PAN, Bank.1,
                                      <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       ~ATC, 
                                       <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                        'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                       ~t, 
                                       MAC(f(~MK, ~ATC),
                                           <
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                            <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                       'IAD', CID>
                             ) @ #k )
                        case Card_Responds_To_GenerateAC_CDA
                        solve( !Shk( ~PAN, ~MK ) ▶₃ #k )
                          case Create_Card
                          solve( !IssuingBank( ~PAN, $Bank.1 ) ▶₄ #k )
                            case Create_Card
                            solve( Card_Ready_For_Cryptogram( ~PAN,
                                                              <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                               'Purchase', ~UN>,
                                                              ~ATC,
                                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>,
                                                              ~t
                                   ) ▶₀ #k )
                              case Card_Responds_To_ReadRecord_NotDDA
                              solve( Commit( $Bank, ~PAN,
                                             <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 
                                              'OnlinePIN', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                              ~ATC, 
                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                              ~t, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                              'IAD', CID>
                                     ) @ #l )
                                case Bank_Commits
                                solve( Bank_Commits( $Bank, $Terminal.1,
                                                     <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                                      'IAD', CID>,
                                                     channelID.1, ARPC.1
                                       ) ▶₀ #l )
                                  case Bank_Processes_CVM_OnlinePIN
                                  solve( !Value( $amount, 'High' ) ▶₁ #l )
                                    case Generate_Amount_High
                                    solve( !IssuingCA( $Bank, $CA.1 ) ▶₂ #l )
                                      case Create_Bank
                                      solve( !KU( sign(<'05', nc.1, 'ARQC', 
                                                        MAC(f(~MK, ~ATC),
                                                            <
                                                             <
                                                              <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                               'Purchase', ~UN>, 
                                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                             <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID
                                                            >), 
                                                        h(<
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           'ARQC', ~ATC, 
                                                           MAC(f(~MK, ~ATC),
                                                               <
                                                                <
                                                                 <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                  'Purchase', ~UN>, 
                                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID
                                                               >), 
                                                           <'IAD', CID>, 
                                                           <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, ~t>), 
                                                        ~UN>,
                                                       x.1)
                                             ) @ #vk.59 )
                                        case Card_Responds_To_GenerateAC_CDA
                                        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.70 )
                                          case Card_Responds_To_ReadRecord_NotDDA
                                          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 
                                                            'CDA', ODCVM, $furtherData>,
                                                           ~privkBank)
                                                 ) @ #vk.73 )
                                            case Card_Responds_To_ReadRecord_NotDDA
                                            solve( Bank_Checked_AC( $Bank, $Terminal,
                                                                    <~PAN, <'CDA', furtherData.1>, 
                                                                     'OnlinePIN', 
                                                                     <
                                                                      <$amount.1, country, currency, date, 
                                                                       type, UN.1>, 
                                                                      CDOL1>, 
                                                                     ATC.1, DH, t.1, AC, IAD>,
                                                                    aenc(~PIN, pk(~privkBank)), ~channelID,
                                                                    ARPC
                                                   ) ▶₀ #vr.25 )
                                              case Bank_Receives_AC
                                              solve( Bank_Checked_AC( $Bank, $Terminal.1,
                                                                      <~PAN, <'CDA', ODCVM, $furtherData>, 
                                                                       'OnlinePIN', 
                                                                       <
                                                                        <$amount, 'Switzerland', 'CHF', 
                                                                         'YYMMDD', 'Purchase', ~UN>, 
                                                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                                       ~ATC, 
                                                                       <'g'^~Card_Eph_Sk, 
                                                                        'g'^~Terminal_Eph_Sk, 
                                                                        'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                                       ~t, 
                                                                       MAC(f(~MK, ~ATC),
                                                                           <
                                                                            <
                                                                             <$amount, 'Switzerland', 'CHF', 
                                                                              'YYMMDD', 'Purchase', ~UN>, 
                                                                             'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                                            <'CDA', ODCVM, $furtherData>, 
                                                                            ~ATC, 'IAD', 'ARQC'>), 
                                                                       'IAD', 'ARQC'>,
                                                                      aenc(~PIN, pk(~privkBank)), channelID.1,
                                                                      ARPC
                                                     ) ▶₀ #vr.26 )
                                                case Bank_Receives_AC
                                                solve( !KU( ~UN ) @ #vk.58 )
                                                  case Terminal_Sends_GPO
                                                  solve( !KU( ~ATC ) @ #vk.59 )
                                                    case Card_Responds_To_GenerateAC_CDA
                                                    solve( !KU( ~PAN ) @ #vk.62 )
                                                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                                                      solve( !KU( ~t ) @ #vk.73 )
                                                        case Card_Ranging
                                                        solve( !KU( ~nc ) @ #vk.62 )
                                                          case Card_Responds_To_GenerateAC_CDA
                                                          solve( !KU( pk(~privkBank) ) @ #vk.71 )
                                                            case Card_Responds_To_ReadRecord_NotDDA
                                                            solve( !KU( pk(~privkCard) ) @ #vk.73 )
                                                              case Card_Responds_To_ReadRecord_NotDDA
                                                              solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.75 )
                                                                case Card_Ext_Responds_To_Hello
                                                                solve( !KU( MAC(kdf('g'^(~Card_Eph_Sk*
                                                                                         ~Terminal_Eph_Sk),
                                                                                    'MAC_CARD_TO_READER'),
                                                                                <'g'^~Terminal_Eph_Sk, 
                                                                                 'g'^~Card_Eph_Sk>)
                                                                       ) @ #vk.76 )
                                                                  case Card_Ext_Responds_To_Hello
                                                                  solve( !KU( 'g'^~Terminal_Eph_Sk
                                                                         ) @ #vk.64 )
                                                                    case Terminal_Ext_Sends_Hello
                                                                    SOLVED // trace found
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executable_ODCVM:
  exists-trace
  "∃ Bank PAN t #i #j #k #l #m.
    ((((((((((#i < #j) ∧
             (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i)) ∧
            (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j)) ∧
           (#k < #l)) ∧
          (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k)) ∧
         (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l)) ∧
        (ODCVM_Terminal( PAN ) @ #m)) ∧
       (∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b))) ∧
      (∀ #a #b. ((OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b)) ⇒ (#a = #b))) ∧
     (∀ A B r #a #b. ((Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b)) ⇒ (A = B))) ∧
    (¬(∃ A #a. Compromise( A ) @ #a))"
/*
guarded formula characterizing all satisfying traces:
"∃ Bank PAN t #i #j #k #l #m.
  (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i) ∧
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j) ∧
  (Running( PAN, Bank, <'Card', 'Bank', t> ) @ #k) ∧
  (Commit( Bank, PAN, <'Card', 'Bank', t> ) @ #l) ∧
  (ODCVM_Terminal( PAN ) @ #m)
 ∧
  (#i < #j) ∧
  (#k < #l) ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #a #b. (OneTerminal( ) @ #a) ∧ (OneTerminal( ) @ #b) ⇒ #a = #b) ∧
  (∀ A B r #a #b. (Role( A, r ) @ #a) ∧ (Role( B, r ) @ #b) ⇒ A = B) ∧
  (∀ A #a. (Compromise( A ) @ #a) ⇒ ⊥)"
*/
simplify
solve( Terminal_Ready_For_CVM( $Terminal, ~PAN, $Bank, $CA,
                               <$amount, country, currency, date, type, ~UN>,
                               <auth, 'ODCVM', furtherData2>, DH, pubkBank, pubkCard, CVM, t
       ) ▶₀ #m )
  case Terminal_Receives_Records_CDA_case_2
  solve( !Value( $amount, 'High' ) ▶₁ #m )
    case Generate_Amount_High
    solve( Running( ~PAN, 'Terminal', <'Card', 'Terminal', t.1> ) @ #i )
      case Card_Responds_To_GenerateAC_CDA
      solve( !Shk( ~PAN, ~MK ) ▶₃ #i )
        case Create_Card
        solve( !IssuingBank( ~PAN, $Bank ) ▶₄ #i )
          case Create_Card
          solve( Card_Ready_For_Cryptogram( ~PAN,
                                            <amount, country, currency, date, type, UN>, ATC,
                                            <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t
                 ) ▶₀ #i )
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !LtkCard( ~PAN, ~privkCard ) ▶₁ #i )
              case Set_Records_NotSDA
              solve( !AIP( ~PAN, <'CDA', furtherData> ) ▶₂ #i )
                case Create_Card
                solve( Commit( 'Terminal', ~PAN,
                               <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, CVM, 
                                <<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                                ~ATC, <'g'^~Card_Eph_Sk, Terminal_Eph_Pk, Secret>, ~t, 
                                MAC(f(~MK, ~ATC),
                                    <<<amount, country, currency, date, type, UN>, 'TVR', CVM, 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                'IAD', CID>
                       ) @ #j )
                  case Terminal_Commits_ARQC
                  solve( Terminal_Received_AC( $Terminal, $Bank.1, $CA, nc.1, 'ARQC',
                                               <~PAN, <'CDA', ODCVM, $furtherData>, CVM, 
                                                <<$amount, country, currency, date, type, ~UN>, 'TVR', CVM, 
                                                 'HHMMSS'>, 
                                                ~ATC, <'g'^~Card_Eph_Sk, Terminal_Eph_Pk, Secret>, ~t, 
                                                MAC(f(~MK, ~ATC),
                                                    <
                                                     <<$amount, country, currency, date, type, ~UN>, 'TVR', 
                                                      CVM, 'HHMMSS'>, 
                                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                                'IAD', CID>,
                                               supportedCVM, ~channelID, ~t
                         ) ▶₀ #j )
                    case Terminal_Receives_AC_CDA
                    solve( !KU( MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>)
                           ) @ #vk.74 )
                      case Card_Responds_To_GenerateAC_CDA
                      solve( !Value( $amount, 'High' ) ▶₁ #j )
                        case Generate_Amount_High
                        solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                                     <'ARC', ARPC>
                               ) ▶₂ #j )
                          case Terminal_Bank_Network_case_1
                          solve( Running( ~PAN, Bank.1,
                                          <'Card', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           ~t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>
                                 ) @ #k )
                            case Card_Responds_To_GenerateAC_CDA
                            solve( !Shk( ~PAN, ~MK ) ▶₃ #k )
                              case Create_Card
                              solve( !IssuingBank( ~PAN, $Bank.1 ) ▶₄ #k )
                                case Create_Card
                                solve( Card_Ready_For_Cryptogram( ~PAN,
                                                                  <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                   'Purchase', ~UN>,
                                                                  ~ATC,
                                                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>,
                                                                  ~t
                                       ) ▶₀ #k )
                                  case Card_Responds_To_ReadRecord_NotDDA
                                  solve( Commit( $Bank, ~PAN,
                                                 <'Card', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 
                                                  'ODCVM', 
                                                  <
                                                   <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                   >, 
                                                   'TVR', 'ODCVM', 'HHMMSS'>, 
                                                  ~ATC, 
                                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                  ~t, 
                                                  MAC(f(~MK, ~ATC),
                                                      <
                                                       <
                                                        <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                         ~UN>, 
                                                        'TVR', 'ODCVM', 'HHMMSS'>, 
                                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                                  'IAD', CID>
                                         ) @ #l )
                                    case Bank_Commits
                                    solve( Bank_Commits( $Bank, $Terminal.1,
                                                         <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          ~ATC, 
                                                          <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                           'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                          ~t, 
                                                          MAC(f(~MK, ~ATC),
                                                              <
                                                               <
                                                                <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                 'Purchase', ~UN>, 
                                                                'TVR', 'ODCVM', 'HHMMSS'>, 
                                                               <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                               CID>), 
                                                          'IAD', CID>,
                                                         channelID.1, ARPC.1
                                           ) ▶₀ #l )
                                      case Bank_Processes_CVM_NotOnlinePIN
                                      solve( !Value( $amount, 'High' ) ▶₁ #l )
                                        case Generate_Amount_High
                                        solve( !IssuingCA( $Bank, $CA.1 ) ▶₂ #l )
                                          case Create_Bank
                                          solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.24 )
                                            case Card_Responds_To_ReadRecord_NotDDA
                                            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                                              'ODCVM', $furtherData>,
                                                             ~privkBank)
                                                   ) @ #vk.37 )
                                              case Card_Responds_To_ReadRecord_NotDDA
                                              solve( !KU( sign(<'05', nc.1, 'ARQC', 
                                                                MAC(f(~MK, ~ATC),
                                                                    <
                                                                     <
                                                                      <$amount, 'Switzerland', 'CHF', 
                                                                       'YYMMDD', 'Purchase', ~UN>, 
                                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 
                                                                     'IAD', CID>), 
                                                                h(<
                                                                   <
                                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                     'Purchase', ~UN>, 
                                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                                   'ARQC', ~ATC, 
                                                                   MAC(f(~MK, ~ATC),
                                                                       <
                                                                        <
                                                                         <$amount, 'Switzerland', 'CHF', 
                                                                          'YYMMDD', 'Purchase', ~UN>, 
                                                                         'TVR', 'ODCVM', 'HHMMSS'>, 
                                                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 
                                                                        'IAD', CID>), 
                                                                   <'IAD', CID>, 
                                                                   <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, 
                                                                   ~t>), 
                                                                ~UN>,
                                                               ~privkCard)
                                                     ) @ #vk.77 )
                                                case Card_Responds_To_GenerateAC_CDA
                                                solve( Bank_Checked_AC( $Bank, $Terminal,
                                                                        <~PAN.1, <'CDA', furtherData.1>, 
                                                                         CVM.1, 
                                                                         <
                                                                          <$amount.1, country, currency, 
                                                                           date, type, UN.1>, 
                                                                          CDOL1>, 
                                                                         ATC.1, DH, t.1, AC, IAD>,
                                                                        'Null', ~channelID, ARPC
                                                       ) ▶₀ #vr.23 )
                                                  case Bank_Receives_AC
                                                  solve( Bank_Checked_AC( $Bank, $Terminal.1,
                                                                          <~PAN, 
                                                                           <'CDA', 'ODCVM', $furtherData>, 
                                                                           'ODCVM', 
                                                                           <
                                                                            <$amount, 'Switzerland', 'CHF', 
                                                                             'YYMMDD', 'Purchase', ~UN>, 
                                                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                                                           ~ATC, 
                                                                           <'g'^~Card_Eph_Sk, 
                                                                            'g'^~Terminal_Eph_Sk, 
                                                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk
                                                                                )
                                                                           >, 
                                                                           ~t, 
                                                                           MAC(f(~MK, ~ATC),
                                                                               <
                                                                                <
                                                                                 <$amount, 'Switzerland', 
                                                                                  'CHF', 'YYMMDD', 
                                                                                  'Purchase', ~UN>, 
                                                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                                                <'CDA', 'ODCVM', $furtherData
                                                                                >, 
                                                                                ~ATC, 'IAD', 'ARQC'>), 
                                                                           'IAD', 'ARQC'>,
                                                                          'Null', channelID.1, ARPC
                                                         ) ▶₀ #vr.24 )
                                                    case Bank_Receives_AC
                                                    solve( !KU( ~PAN ) @ #vk.16 )
                                                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                                                      solve( !KU( ~UN ) @ #vk.74 )
                                                        case Terminal_Sends_GPO
                                                        solve( !KU( ~ATC ) @ #vk.75 )
                                                          case Card_Responds_To_GenerateAC_CDA
                                                          solve( !KU( ~t ) @ #vk.50 )
                                                            case Card_Ranging
                                                            solve( !KU( ~nc ) @ #vk.76 )
                                                              case Card_Responds_To_GenerateAC_CDA
                                                              solve( !KU( pk(~privkBank) ) @ #vk.36 )
                                                                case Card_Responds_To_ReadRecord_NotDDA
                                                                solve( !KU( MAC(kdf('g'^(~Card_Eph_Sk*
                                                                                         ~Terminal_Eph_Sk),
                                                                                    'MAC_CARD_TO_READER'),
                                                                                <'g'^~Terminal_Eph_Sk, 
                                                                                 'g'^~Card_Eph_Sk>)
                                                                       ) @ #vk.57 )
                                                                  case Card_Ext_Responds_To_Hello
                                                                  solve( !KU( pk(~privkCard) ) @ #vk.41 )
                                                                    case Card_Responds_To_ReadRecord_NotDDA
                                                                    solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.57 )
                                                                      case Card_Ext_Responds_To_Hello
                                                                      solve( !KU( 'g'^~Terminal_Eph_Sk
                                                                             ) @ #vk.70 )
                                                                        case Terminal_Ext_Sends_Hello
                                                                        SOLVED // trace found
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma bank_accepts:
  all-traces
  "∀ t #i.
    (TerminalAccepts( t ) @ #i) ⇒
    ((¬(∃ #j. BankDeclines( t ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ t #i.
  (TerminalAccepts( t ) @ #i)
 ∧
  (∃ #j. (BankDeclines( t ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( TerminalAccepts( <~PAN, AIP, CVM, X, ATC, DH, t, AC, IAD> ) @ #i )
  case Terminal_Commits_ARQC
  solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
               <
                <~PAN, <'CDA', furtherData>, CVM, 
                 <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                 <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>, 
                encPIN>
         ) ▶₀ #j )
    case Terminal_Bank_Network_case_01
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN, pk(~privkBank.1)), ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_02
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.17 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN, pk(~privkBank.1)), ~channelID, ARPC
               ) ▶₀ #vr.17 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_03
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN.1, pk(~privkBank.2)), ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_04
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN.1, pk(~privkBank.2)), ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_05
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.21 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN.1, pk(~privkBank.2)), ~channelID, ARPC
               ) ▶₀ #vr.21 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_06
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.21 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN.1, pk(~privkBank.2)), ~channelID, ARPC
               ) ▶₀ #vr.21 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_07
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'SDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'SDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'SDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN, pk(~privkBank.1)), ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'SDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'SDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'SDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_08
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.17 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'DDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'DDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'DDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN, pk(~privkBank.1)), ~channelID, ARPC
               ) ▶₀ #vr.17 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'DDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'DDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                           'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <'DDA', 'ODCVM', Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_09
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN, pk(~privkBank.1)), ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_10
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.2>, CVM.1, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.2>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN.1, pk(~privkBank.2)), ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_11
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.2>, CVM.1, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData.2>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN.1, pk(~privkBank.2)), ~channelID, ARPC
               ) ▶₀ #vr.19 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_12
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                'Null', ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'ODCVM', furtherData2>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'ODCVM', furtherData2>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'ODCVM', furtherData2>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
        case Create_Card
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN.1, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.1, DH, 
                                 t.1, AC.1, IAD.1>,
                                aenc(~PIN, pk(~privkBank.1)), ~channelID, ARPC
               ) ▶₀ #vr.15 )
          case Bank_Receives_AC_case_1
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'ODCVM', furtherData2>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_2
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'ODCVM', furtherData2>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        next
          case Bank_Receives_AC_case_3
          by solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                          <~PAN, <'CDA', 'ODCVM', furtherData2>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                          supportedCVM, ~channelID, t
                    ) ▶₀ #i )
        qed
      qed
    qed
  qed
next
  case Terminal_Commits_TC
  solve( Recv( $Terminal.1, $Bank.1, <channelID.1, 'Mastercard', '1'>,
               <
                <~PAN, <'CDA', furtherData>, CVM, 
                 <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                 <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>, 
                encPIN>
         ) ▶₀ #j )
    case Terminal_Bank_Network_case_01
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by solve( !Value( $amount, 'High' ) ▶₁ #i )
      qed
    qed
  next
    case Terminal_Bank_Network_case_02
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by solve( !Value( $amount, 'High' ) ▶₁ #i )
      qed
    qed
  next
    case Terminal_Bank_Network_case_03
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                    'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Bank_Network_case_04
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                    'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ATC, <'SDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Bank_Network_case_05
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                    'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Bank_Network_case_06
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                    'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ATC, <'DDA', Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Bank_Network_case_07
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ATC, <'SDA', 'ODCVM', Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( ~PAN ) @ #vk.9 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.63 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA.1 ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.63 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA.1 ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.33 )
                  case c_MAC
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.59 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.33 )
                  case c_MAC
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.58 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.61 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.33 )
                  case c_MAC
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.59 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA.1 ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.63 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.63 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA.1 ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.63 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.62 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'03', ~PAN, expDate.1, 'SDA', 'ODCVM', Secret>,
                               ~privkBank.1)
                     ) @ #vk.24 )
                case c_sign
                solve( !KU( ~privkBank.1 ) @ #vk.63 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA.1 ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_08
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ATC, <'DDA', 'ODCVM', Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( ~PAN ) @ #vk.12 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.31 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.75 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.80 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.53 )
                    case c_MAC
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.76 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.53 )
                    case c_MAC
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.76 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.32 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.44 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( ~privkCard ) @ #vk.64 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.74 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( ~privkCard ) @ #vk.63 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( ~privkCard ) @ #vk.63 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.66 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.31 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.75 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.80 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.53 )
                    case c_MAC
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.76 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.53 )
                    case c_MAC
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.76 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.32 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.44 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( ~privkCard ) @ #vk.64 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.74 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( ~privkCard ) @ #vk.63 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( ~privkCard ) @ #vk.63 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.66 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.31 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.41 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.41 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.82 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.73 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.32 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.76 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.31 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.82 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.82 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.73 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.32 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.76 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.76 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.31 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.81 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.82 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                  'DDA', 'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.82 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.73 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.32 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.43 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.75 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.76 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                  'ODCVM', Secret>,
                                 ~privkBank.1)
                       ) @ #vk.42 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.76 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_09
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        by solve( !Value( $amount, 'High' ) ▶₁ #i )
      qed
    qed
  next
    case Terminal_Bank_Network_case_10
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Bank_Network_case_11
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Bank_Network_case_12
    solve( !Shk( ~PAN, ~MK ) ▶₁ #j )
      case Create_Card
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                   <~PAN, <'CDA', 'ODCVM', furtherData2>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( ~PAN ) @ #vk.13 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( sign(<'05', nc, 'TC', AC, 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.10 )
              case Card_Responds_To_GenerateAC_CDA
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.33 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.98 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.90 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.76 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.40 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.101 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.70 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA.1) ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.103 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.95 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( sign(<'05', nc, 'TC', AC, 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.10 )
              case Card_Responds_To_GenerateAC_CDA
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.33 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.98 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.90 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.76 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.40 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.101 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.70 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA.1) ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.103 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.95 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'05', nc, 'TC', AC, 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.10 )
              case Card_Responds_To_GenerateAC_CDA
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.33 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.98 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.90 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.77 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.40 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.102 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.70 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA.1) ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.103 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.95 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'05', nc, 'TC', AC, 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.10 )
              case Card_Responds_To_GenerateAC_CDA
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.33 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.90 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.77 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.40 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.102 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.70 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA.1) ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.78 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.78 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.78 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.95 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( sign(<'05', nc, 'TC', AC, 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.10 )
              case Card_Responds_To_GenerateAC_CDA
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.33 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                  'CDA', 'ODCVM', furtherData2>,
                                 ~privkBank.1)
                       ) @ #vk.45 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( ~privkBank.1 ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA.1 ) @ #vk.90 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_InternalAuthenticate
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.77 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.40 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.102 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.70 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA.1) ) @ #vk.41 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.78 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.78 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', furtherData2>,
                                   ~privkBank.1)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.78 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank.1 ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA.1 ) @ #vk.95 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_terminal_minimal:
  all-traces
  "∀ T P r t #i.
    ((∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b)) ∧
     (Commit( T, P, <r, 'Terminal', t> ) @ #i)) ⇒
    ((∃ #j. Running( P, T, <r, 'Terminal', t> ) @ #j) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ T P r t #i.
  (Commit( T, P, <r, 'Terminal', t> ) @ #i)
 ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ⇒ ⊥) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit( T, P, <r, 'Terminal', t> ) @ #i )
  case Terminal_Commits_ARQC_case_1
  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
               <'ARC', ARPC>
         ) ▶₂ #i )
    case Terminal_Bank_Network_case_1
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            'Null', ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.47 )
            case c_f
            solve( !KU( ~MK ) @ #vk.68 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.58 )
            case c_f
            solve( !KU( ~MK ) @ #vk.79 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.18 )
            case Card_Responds_To_GenerateAC_CDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.48 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.54 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.85 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.89 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.17 )
            case c_sign
            solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.46 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.86 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.90 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.59 )
            case c_f
            solve( !KU( ~MK ) @ #vk.76 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_2
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.47 )
            case c_f
            solve( !KU( ~MK ) @ #vk.68 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.58 )
            case c_f
            solve( !KU( ~MK ) @ #vk.79 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', furtherData>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.17 )
            case Card_Responds_To_GenerateAC_CDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                              $furtherData>,
                             ~privkBank)
                   ) @ #vk.52 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.85 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.89 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.16 )
            case c_sign
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                              $furtherData>,
                             ~privkBank)
                   ) @ #vk.50 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.86 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.90 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.57 )
            case c_f
            solve( !KU( ~MK ) @ #vk.74 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Terminal_Commits_ARQC_case_2
  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
               <'ARC', ARPC>
         ) ▶₂ #i )
    case Terminal_Bank_Network_case_1
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            'Null', ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Bank_Network_case_2
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        by contradiction /* from formulas */
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Terminal_Commits_TC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                               <~PAN, <'CDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                               supportedCVM, ~channelID, t
         ) ▶₀ #i )
    case Terminal_Receives_AC_CDA_case_1
    solve( !KU( sign(<'05', nc, 'TC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'NoPIN', 'HHMMSS'>, 
                         'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'NoPIN', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData.1>, ~ATC, 'IAD', 'TC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.80 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.80 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_MAC
        solve( !KU( f(~MK, ~ATC) ) @ #vk.84 )
          case c_f
          solve( !KU( ~MK ) @ #vk.88 )
            case Compromise_Bank_Card_ShK
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.39 )
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.89 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', furtherData>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.68 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.68 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.34 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.45 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.70 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.45 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.70 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.70 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.58 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_CDA_case_2
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_4
    solve( !KU( sign(<'05', nc, 'TC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.81 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.81 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_MAC
        solve( !KU( f(~MK, ~ATC) ) @ #vk.85 )
          case c_f
          solve( !KU( ~MK ) @ #vk.89 )
            case Compromise_Bank_Card_ShK
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.39 )
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.90 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.70 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.70 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.34 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.45 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.45 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.59 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.60 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_1
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
               ) @ #vk.32 )
          case c_MAC
          solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                 ) @ #vk.50 )
            case c_kdf
            solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.52 )
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.54 )
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.39 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_2
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.10 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.30 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.49 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.63 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.64 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.64 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.31 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.66 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.55 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_4
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_5
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_6
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_7
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
               ) @ #vk.32 )
          case c_MAC
          solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                 ) @ #vk.50 )
            case c_kdf
            solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.52 )
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.54 )
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.39 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_8
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.10 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.30 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.51 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.63 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.64 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.64 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.31 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.66 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.55 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma auth_to_terminal:
  all-traces
  "∀ T P r t #i.
    (Commit( T, P, <r, 'Terminal', t> ) @ #i) ⇒
    (((∃ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ T2 P2 #i2.
          (Commit( T2, P2, <r, 'Terminal', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ T P r t #i.
  (Commit( T, P, <r, 'Terminal', t> ) @ #i)
 ∧
  (((∀ #j. (Running( P, T, <r, 'Terminal', t> ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ T2 P2 #i2.
      (Commit( T2, P2, <r, 'Terminal', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit( T, P, <r, 'Terminal', t> ) @ #i )
  case Terminal_Commits_ARQC_case_1
  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
               <'ARC', ARPC>
         ) ▶₂ #i )
    case Terminal_Bank_Network_case_1
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            'Null', ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.47 )
            case c_f
            solve( !KU( ~MK ) @ #vk.68 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.58 )
            case c_f
            solve( !KU( ~MK ) @ #vk.79 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.18 )
            case Card_Responds_To_GenerateAC_CDA
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.50 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( (∀ #j.
                         (Running( ~PAN, 'Terminal',
                                   <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'ODCVM', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                                           <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    qed
                  next
                    case Terminal_Commits_TC
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                         >), 
                                                     'IAD', 'ARQC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.50 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( (∀ #j.
                         (Running( ~PAN, 'Terminal',
                                   <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'ODCVM', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                                           <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    qed
                  next
                    case Terminal_Commits_TC
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                         >), 
                                                     'IAD', 'ARQC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.50 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( (∀ #j.
                         (Running( ~PAN, 'Terminal',
                                   <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'ODCVM', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                                           <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    qed
                  next
                    case Terminal_Commits_TC
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                         >), 
                                                     'IAD', 'ARQC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.80 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.47 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.53 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.53 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.53 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.96 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.48 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.54 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.89 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.54 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.89 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.54 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.89 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.89 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.17 )
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.97 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.46 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.90 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.90 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.90 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.90 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.59 )
            case c_f
            solve( !KU( ~MK ) @ #vk.76 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_2
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.47 )
            case c_f
            solve( !KU( ~MK ) @ #vk.68 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.58 )
            case c_f
            solve( !KU( ~MK ) @ #vk.79 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', furtherData>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.17 )
            case Card_Responds_To_GenerateAC_CDA
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                              ODCVM, $furtherData>,
                             ~privkBank)
                   ) @ #vk.49 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                     ) @ #vk.46 )
                case Card_Responds_To_ReadRecord_DDA
                solve( (∀ #j.
                         (Running( ~PAN, 'Terminal',
                                   <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.1, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case Terminal_Commits_TC
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                         >), 
                                                     'IAD', 'ARQC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( (∀ #j.
                         (Running( ~PAN, 'Terminal',
                                   <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.1, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case Terminal_Commits_TC
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                         >), 
                                                     'IAD', 'ARQC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( (∀ #j.
                         (Running( ~PAN, 'Terminal',
                                   <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.1, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case Terminal_Commits_TC
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                         >), 
                                                     'IAD', 'ARQC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.80 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, 'OnlinePIN', 
                              'CDA', ODCVM, $furtherData>,
                             ~privkBank)
                   ) @ #vk.51 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.96 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                              $furtherData>,
                             ~privkBank)
                   ) @ #vk.52 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.87 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.89 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.16 )
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                              ODCVM, $furtherData>,
                             ~privkBank)
                   ) @ #vk.49 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.97 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                              $furtherData>,
                             ~privkBank)
                   ) @ #vk.50 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.88 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.90 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.57 )
            case c_f
            solve( !KU( ~MK ) @ #vk.74 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Terminal_Commits_ARQC_case_2
  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
               <'ARC', ARPC>
         ) ▶₂ #i )
    case Terminal_Bank_Network_case_1
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            'Null', ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.47 )
            case c_f
            solve( !KU( ~MK ) @ #vk.68 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.58 )
            case c_f
            solve( !KU( ~MK ) @ #vk.79 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.18 )
            case Card_Responds_To_GenerateAC_CDA
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.50 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( (∀ #j.
                         (Running( $Bank, $Terminal,
                                   <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'ODCVM', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                                           <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.50 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( (∀ #j.
                         (Running( $Bank, $Terminal,
                                   <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'ODCVM', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                                           <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.50 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( (∀ #j.
                         (Running( $Bank, $Terminal,
                                   <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Bank', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'ODCVM', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                                           <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.56 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'ODCVM', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                                              <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.80 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.47 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.53 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.53 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.53 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.96 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.48 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.54 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.89 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.54 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.89 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.54 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.89 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.89 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.17 )
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.97 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.46 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.90 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.90 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                'ODCVM', $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.90 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.90 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.59 )
            case c_f
            solve( !KU( ~MK ) @ #vk.76 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_2
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.47 )
            case c_f
            solve( !KU( ~MK ) @ #vk.68 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.58 )
            case c_f
            solve( !KU( ~MK ) @ #vk.79 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', furtherData>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.17 )
            case Card_Responds_To_GenerateAC_CDA
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                              ODCVM, $furtherData>,
                             ~privkBank)
                   ) @ #vk.49 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( sign(<'02', $Bank, pk(~privkBank), $CA>, ~privkCA)
                     ) @ #vk.46 )
                case Card_Responds_To_ReadRecord_DDA
                solve( (∀ #j.
                         (Running( $Bank, $Terminal,
                                   <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.1, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( (∀ #j.
                         (Running( $Bank, $Terminal,
                                   <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.1, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( (∀ #j.
                         (Running( $Bank, $Terminal,
                                   <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, 
                                    <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                     'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                    ~t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                    'IAD', 'ARQC'>
                          ) @ #j)
                        ⇒
                         ¬(#j < #i))  ∥
                       (∃ T2 P2 #i2.
                         (Commit( T2, P2,
                                  <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   ~ATC, 
                                   <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                    'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                   ~t, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                   'IAD', 'ARQC'>
                          ) @ #i2)
                        ∧
                         ¬(#i2 = #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Commit( T2, P2,
                                 <'Bank', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ~ATC, 
                                  <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                   'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                  ~t, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>), 
                                  'IAD', 'ARQC'>
                         ) @ #i2 )
                    case Terminal_Commits_ARQC
                    solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                                 <'ARC', ARPC>
                           ) ▶₂ #i2 )
                      case Terminal_Bank_Network_case_1
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, CVM.1, 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              'Null', ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      qed
                    next
                      case Terminal_Bank_Network_case_2
                      solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                              <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                               <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, 
                                               ATC.3, DH, t.3, AC, IAD>,
                                              aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                             ) ▶₀ #vr.57 )
                        case Bank_Receives_AC_case_1
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_2
                        by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                        'ARQC',
                                                        <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                         <
                                                          <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                           'Purchase', ~UN>, 
                                                          'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                         ~ATC, 
                                                         <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                          'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                         ~t, 
                                                         MAC(f(~MK, ~ATC),
                                                             <
                                                              <
                                                               <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                                'Purchase', ~UN>, 
                                                               'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                              <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 
                                                              'ARQC'>), 
                                                         'IAD', 'ARQC'>,
                                                        supportedCVM, ~channelID.1, ~t
                                  ) ▶₀ #i2 )
                      next
                        case Bank_Receives_AC_case_3
                        solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                     <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                                      <
                                                       <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                        ~UN>, 
                                                       'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                      ~ATC, 
                                                      <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                       'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                      ~t, 
                                                      MAC(f(~MK, ~ATC),
                                                          <
                                                           <
                                                            <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                             'Purchase', ~UN>, 
                                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                           <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'
                                                          >), 
                                                      'IAD', 'ARQC'>,
                                                     supportedCVM, ~channelID.1, ~t
                               ) ▶₀ #i2 )
                          case Terminal_Receives_AC_CDA
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.80 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, 'OnlinePIN', 
                              'CDA', ODCVM, $furtherData>,
                             ~privkBank)
                   ) @ #vk.51 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.96 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                              $furtherData>,
                             ~privkBank)
                   ) @ #vk.52 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.87 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.89 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( sign(<'05', nc, 'ARQC', 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               'ARQC', ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                            ~UN>,
                           x)
                 ) @ #vk.16 )
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                              ODCVM, $furtherData>,
                             ~privkBank)
                   ) @ #vk.49 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.97 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                              $furtherData>,
                             ~privkBank)
                   ) @ #vk.50 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.88 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.90 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.57 )
            case c_f
            solve( !KU( ~MK ) @ #vk.74 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Terminal_Commits_TC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                               <~PAN, <'CDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                               supportedCVM, ~channelID, t
         ) ▶₀ #i )
    case Terminal_Receives_AC_CDA_case_1
    solve( !KU( sign(<'05', nc, 'TC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'NoPIN', 'HHMMSS'>, 
                         'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'NoPIN', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData.1>, ~ATC, 'IAD', 'TC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( (∀ #j.
                     (Running( ~PAN, 'Terminal',
                               <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'NoPIN', 'HHMMSS'>, 
                                ~ATC, 
                                <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                ~t, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                      ) @ #j)
                    ⇒
                     ¬(#j < #i))  ∥
                   (∃ T2 P2 #i2.
                     (Commit( T2, P2,
                              <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               ~ATC, 
                               <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                               ~t, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                               'IAD', 'TC'>
                      ) @ #i2)
                    ∧
                     ¬(#i2 = #i)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Commit( T2, P2,
                             <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'NoPIN', 'HHMMSS'>, 
                              ~ATC, 
                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                              ~t, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>
                     ) @ #i2 )
                case Terminal_Commits_ARQC
                solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                             <'ARC', ARPC>
                       ) ▶₂ #i2 )
                  case Terminal_Bank_Network_case_1
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          'Null', ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                next
                  case Terminal_Bank_Network_case_2
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Terminal_Commits_TC
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'NoPIN', 'HHMMSS'>, 
                                              ~ATC, 
                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                              ~t, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                              'IAD', 'TC'>,
                                             supportedCVM, ~channelID.1, ~t
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.89 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( (∀ #j.
                     (Running( ~PAN, 'Terminal',
                               <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'NoPIN', 'HHMMSS'>, 
                                ~ATC, 
                                <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                ~t, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                      ) @ #j)
                    ⇒
                     ¬(#j < #i))  ∥
                   (∃ T2 P2 #i2.
                     (Commit( T2, P2,
                              <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               ~ATC, 
                               <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                               ~t, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                               'IAD', 'TC'>
                      ) @ #i2)
                    ∧
                     ¬(#i2 = #i)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Commit( T2, P2,
                             <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'NoPIN', 'HHMMSS'>, 
                              ~ATC, 
                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                              ~t, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>
                     ) @ #i2 )
                case Terminal_Commits_ARQC
                solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                             <'ARC', ARPC>
                       ) ▶₂ #i2 )
                  case Terminal_Bank_Network_case_1
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          'Null', ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                next
                  case Terminal_Bank_Network_case_2
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Terminal_Commits_TC
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'NoPIN', 'HHMMSS'>, 
                                              ~ATC, 
                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                              ~t, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                              'IAD', 'TC'>,
                                             supportedCVM, ~channelID.1, ~t
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.89 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( (∀ #j.
                     (Running( ~PAN, 'Terminal',
                               <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'NoPIN', 'HHMMSS'>, 
                                ~ATC, 
                                <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                ~t, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                      ) @ #j)
                    ⇒
                     ¬(#j < #i))  ∥
                   (∃ T2 P2 #i2.
                     (Commit( T2, P2,
                              <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               ~ATC, 
                               <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                               ~t, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                               'IAD', 'TC'>
                      ) @ #i2)
                    ∧
                     ¬(#i2 = #i)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Commit( T2, P2,
                             <'Card', 'Terminal', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'NoPIN', 'HHMMSS'>, 
                              ~ATC, 
                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                              ~t, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>
                     ) @ #i2 )
                case Terminal_Commits_ARQC
                solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                             <'ARC', ARPC>
                       ) ▶₂ #i2 )
                  case Terminal_Bank_Network_case_1
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          'Null', ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                next
                  case Terminal_Bank_Network_case_2
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'NoPIN', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'NoPIN', 'HHMMSS'>, 
                                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Terminal_Commits_TC
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'NoPIN', 'HHMMSS'>, 
                                              ~ATC, 
                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                              ~t, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                              'IAD', 'TC'>,
                                             supportedCVM, ~channelID.1, ~t
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.89 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.80 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_MAC
        solve( !KU( f(~MK, ~ATC) ) @ #vk.84 )
          case c_f
          solve( !KU( ~MK ) @ #vk.88 )
            case Compromise_Bank_Card_ShK
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.39 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', furtherData>,
                               ~privkBank)
                     ) @ #vk.51 )
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.89 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', furtherData>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.76 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', furtherData>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.77 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', furtherData>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.77 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.68 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.34 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.58 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.70 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.58 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.70 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          furtherData>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.58 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.70 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.58 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_CDA_case_2
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_4
    solve( !KU( sign(<'05', nc, 'TC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( (∀ #j.
                     (Running( ~PAN, 'Terminal',
                               <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'ODCVM', 'HHMMSS'>, 
                                ~ATC, 
                                <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                ~t, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                      ) @ #j)
                    ⇒
                     ¬(#j < #i))  ∥
                   (∃ T2 P2 #i2.
                     (Commit( T2, P2,
                              <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               ~ATC, 
                               <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                               ~t, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                               'IAD', 'TC'>
                      ) @ #i2)
                    ∧
                     ¬(#i2 = #i)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Commit( T2, P2,
                             <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ~ATC, 
                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                              ~t, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>
                     ) @ #i2 )
                case Terminal_Commits_ARQC
                solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                             <'ARC', ARPC>
                       ) ▶₂ #i2 )
                  case Terminal_Bank_Network_case_1
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          'Null', ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                next
                  case Terminal_Bank_Network_case_2
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Terminal_Commits_TC
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                              ~ATC, 
                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                              ~t, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                              'IAD', 'TC'>,
                                             supportedCVM, ~channelID.1, ~t
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.90 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( (∀ #j.
                     (Running( ~PAN, 'Terminal',
                               <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'ODCVM', 'HHMMSS'>, 
                                ~ATC, 
                                <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                ~t, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                      ) @ #j)
                    ⇒
                     ¬(#j < #i))  ∥
                   (∃ T2 P2 #i2.
                     (Commit( T2, P2,
                              <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               ~ATC, 
                               <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                               ~t, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                               'IAD', 'TC'>
                      ) @ #i2)
                    ∧
                     ¬(#i2 = #i)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Commit( T2, P2,
                             <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ~ATC, 
                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                              ~t, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>
                     ) @ #i2 )
                case Terminal_Commits_ARQC
                solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                             <'ARC', ARPC>
                       ) ▶₂ #i2 )
                  case Terminal_Bank_Network_case_1
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          'Null', ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                next
                  case Terminal_Bank_Network_case_2
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Terminal_Commits_TC
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                              ~ATC, 
                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                              ~t, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                              'IAD', 'TC'>,
                                             supportedCVM, ~channelID.1, ~t
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.90 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( (∀ #j.
                     (Running( ~PAN, 'Terminal',
                               <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                 'ODCVM', 'HHMMSS'>, 
                                ~ATC, 
                                <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                ~t, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                'IAD', 'TC'>
                      ) @ #j)
                    ⇒
                     ¬(#j < #i))  ∥
                   (∃ T2 P2 #i2.
                     (Commit( T2, P2,
                              <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               ~ATC, 
                               <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                               ~t, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                               'IAD', 'TC'>
                      ) @ #i2)
                    ∧
                     ¬(#i2 = #i)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Commit( T2, P2,
                             <'Card', 'Terminal', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ~ATC, 
                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                              ~t, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                              'IAD', 'TC'>
                     ) @ #i2 )
                case Terminal_Commits_ARQC
                solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                             <'ARC', ARPC>
                       ) ▶₂ #i2 )
                  case Terminal_Bank_Network_case_1
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          'Null', ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                next
                  case Terminal_Bank_Network_case_2
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                           <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, 
                                           DH, t.3, AC, IAD>,
                                          aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                         ) ▶₀ #vr.51 )
                    case Bank_Receives_AC_case_1
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_2
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  next
                    case Bank_Receives_AC_case_3
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                                     <
                                                      <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', 
                                                       ~UN>, 
                                                      'TVR', 'ODCVM', 'HHMMSS'>, 
                                                     ~ATC, 
                                                     <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                                      'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                                     ~t, 
                                                     MAC(f(~MK, ~ATC),
                                                         <
                                                          <
                                                           <$amount, 'Switzerland', 'CHF', 'YYMMDD', 
                                                            'Purchase', ~UN>, 
                                                           'TVR', 'ODCVM', 'HHMMSS'>, 
                                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'
                                                         >), 
                                                     'IAD', 'TC'>,
                                                    supportedCVM, ~channelID.1, ~t
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Terminal_Commits_TC
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                               'TVR', 'ODCVM', 'HHMMSS'>, 
                                              ~ATC, 
                                              <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                               'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                              ~t, 
                                              MAC(f(~MK, ~ATC),
                                                  <
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', 'TC'>), 
                                              'IAD', 'TC'>,
                                             supportedCVM, ~channelID.1, ~t
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.90 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.81 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_MAC
        solve( !KU( f(~MK, ~ATC) ) @ #vk.85 )
          case c_f
          solve( !KU( ~MK ) @ #vk.89 )
            case Compromise_Bank_Card_ShK
            solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.39 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.51 )
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.51 )
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                'CDA', 'ODCVM', furtherData2>,
                               ~privkBank)
                     ) @ #vk.51 )
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.90 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.78 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.79 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'CDA', 'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.44 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.79 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.70 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.34 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.60 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.60 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                          'ODCVM', furtherData2>,
                         ~privkBank)
               ) @ #vk.45 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~privkCard ) @ #vk.60 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.60 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_1
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( (∀ #j.
                 (Running( ~PAN, 'Terminal',
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                  ) @ #j)
                ⇒
                 ¬(#j < #i))  ∥
               (∃ T2 P2 #i2.
                 (Commit( T2, P2,
                          <'Card', 'Terminal', ~PAN, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'NoPIN', 'HHMMSS'>, 
                           ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                  ) @ #i2)
                ∧
                 ¬(#i2 = #i)) )
          case case_1
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.33 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.59 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( T2, P2,
                         <'Card', 'Terminal', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                 ) @ #i2 )
            case Terminal_Commits_ARQC
            solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i2 )
              case Terminal_Bank_Network_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Terminal_Commits_TC
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                          'NoPIN', 
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'NoPIN', 'HHMMSS'>, 
                                          ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                         supportedCVM.1, ~channelID.1, t
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( (∀ #j.
                 (Running( ~PAN, 'Terminal',
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                  ) @ #j)
                ⇒
                 ¬(#j < #i))  ∥
               (∃ T2 P2 #i2.
                 (Commit( T2, P2,
                          <'Card', 'Terminal', ~PAN, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'NoPIN', 'HHMMSS'>, 
                           ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                  ) @ #i2)
                ∧
                 ¬(#i2 = #i)) )
          case case_1
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.33 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.58 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( T2, P2,
                         <'Card', 'Terminal', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                 ) @ #i2 )
            case Terminal_Commits_ARQC
            solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i2 )
              case Terminal_Bank_Network_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Terminal_Commits_TC
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                          'NoPIN', 
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'NoPIN', 'HHMMSS'>, 
                                          ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                         supportedCVM.1, ~channelID.1, t
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( (∀ #j.
                 (Running( ~PAN, 'Terminal',
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                  ) @ #j)
                ⇒
                 ¬(#j < #i))  ∥
               (∃ T2 P2 #i2.
                 (Commit( T2, P2,
                          <'Card', 'Terminal', ~PAN, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'NoPIN', 'HHMMSS'>, 
                           ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                  ) @ #i2)
                ∧
                 ¬(#i2 = #i)) )
          case case_1
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.33 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.59 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( T2, P2,
                         <'Card', 'Terminal', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>
                 ) @ #i2 )
            case Terminal_Commits_ARQC
            solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i2 )
              case Terminal_Bank_Network_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'NoPIN', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'NoPIN', 'HHMMSS'>, 
                                                 ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Terminal_Commits_TC
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                          'NoPIN', 
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'NoPIN', 'HHMMSS'>, 
                                          ATC, <'SDA', Terminal_Eph_Pk, $furtherData>, t, AC, IAD>,
                                         supportedCVM.1, ~channelID.1, t
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.39 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_2
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.10 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.30 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( (∀ #j.
                   (Running( ~PAN, 'Terminal',
                             <'Card', 'Terminal', ~PAN, 
                              <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'NoPIN', 'HHMMSS'>, 
                              ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                    ) @ #j)
                  ⇒
                   ¬(#j < #i))  ∥
                 (∃ T2 P2 #i2.
                   (Commit( T2, P2,
                            <'Card', 'Terminal', ~PAN, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'NoPIN', 'HHMMSS'>, 
                             ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                    ) @ #i2)
                  ∧
                   ¬(#i2 = #i)) )
            case case_1
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.52 )
              case c_MAC
              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                     ) @ #vk.75 )
                case c_kdf
                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                qed
              qed
            qed
          next
            case case_2
            solve( Commit( T2, P2,
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                   ) @ #i2 )
              case Terminal_Commits_ARQC
              solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i2 )
                case Terminal_Bank_Network_case_1
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        'Null', ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              qed
            next
              case Terminal_Commits_TC
              solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                           <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                            'NoPIN', 
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'NoPIN', 'HHMMSS'>, 
                                            ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                           supportedCVM, ~channelID.1, t
                     ) ▶₀ #i2 )
                case Terminal_Receives_AC_NoCDA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( (∀ #j.
                   (Running( ~PAN, 'Terminal',
                             <'Card', 'Terminal', ~PAN, 
                              <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'NoPIN', 'HHMMSS'>, 
                              ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                    ) @ #j)
                  ⇒
                   ¬(#j < #i))  ∥
                 (∃ T2 P2 #i2.
                   (Commit( T2, P2,
                            <'Card', 'Terminal', ~PAN, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'NoPIN', 'HHMMSS'>, 
                             ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                    ) @ #i2)
                  ∧
                   ¬(#i2 = #i)) )
            case case_1
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.51 )
              case c_MAC
              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                     ) @ #vk.76 )
                case c_kdf
                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                qed
              qed
            qed
          next
            case case_2
            solve( Commit( T2, P2,
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                   ) @ #i2 )
              case Terminal_Commits_ARQC
              solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i2 )
                case Terminal_Bank_Network_case_1
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        'Null', ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              qed
            next
              case Terminal_Commits_TC
              solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                           <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                            'NoPIN', 
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'NoPIN', 'HHMMSS'>, 
                                            ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                           supportedCVM, ~channelID.1, t
                     ) ▶₀ #i2 )
                case Terminal_Receives_AC_NoCDA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.73 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( (∀ #j.
                   (Running( ~PAN, 'Terminal',
                             <'Card', 'Terminal', ~PAN, 
                              <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'NoPIN', 'HHMMSS'>, 
                              ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                    ) @ #j)
                  ⇒
                   ¬(#j < #i))  ∥
                 (∃ T2 P2 #i2.
                   (Commit( T2, P2,
                            <'Card', 'Terminal', ~PAN, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'NoPIN', 'HHMMSS'>, 
                             ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                    ) @ #i2)
                  ∧
                   ¬(#i2 = #i)) )
            case case_1
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.51 )
              case c_MAC
              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                     ) @ #vk.76 )
                case c_kdf
                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                qed
              qed
            qed
          next
            case case_2
            solve( Commit( T2, P2,
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>
                   ) @ #i2 )
              case Terminal_Commits_ARQC
              solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i2 )
                case Terminal_Bank_Network_case_1
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        'Null', ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'NoPIN', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'NoPIN', 'HHMMSS'>, 
                                                   ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              qed
            next
              case Terminal_Commits_TC
              solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                           <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                            'NoPIN', 
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'NoPIN', 'HHMMSS'>, 
                                            ATC, <'DDA', ODCVM, $furtherData>, t, AC, IAD>,
                                           supportedCVM, ~channelID.1, t
                     ) ▶₀ #i2 )
                case Terminal_Receives_AC_NoCDA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.73 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.64 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.31 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.58 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.66 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.55 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_4
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_5
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_6
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_7
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( (∀ #j.
                 (Running( ~PAN, 'Terminal',
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                  ) @ #j)
                ⇒
                 ¬(#j < #i))  ∥
               (∃ T2 P2 #i2.
                 (Commit( T2, P2,
                          <'Card', 'Terminal', ~PAN, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                  ) @ #i2)
                ∧
                 ¬(#i2 = #i)) )
          case case_1
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.33 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.59 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( T2, P2,
                         <'Card', 'Terminal', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                 ) @ #i2 )
            case Terminal_Commits_ARQC
            solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i2 )
              case Terminal_Bank_Network_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Terminal_Commits_TC
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                          'ODCVM', 
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'ODCVM', 'HHMMSS'>, 
                                          ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                         supportedCVM.1, ~channelID.1, t
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( (∀ #j.
                 (Running( ~PAN, 'Terminal',
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                  ) @ #j)
                ⇒
                 ¬(#j < #i))  ∥
               (∃ T2 P2 #i2.
                 (Commit( T2, P2,
                          <'Card', 'Terminal', ~PAN, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                  ) @ #i2)
                ∧
                 ¬(#i2 = #i)) )
          case case_1
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.33 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.58 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( T2, P2,
                         <'Card', 'Terminal', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                 ) @ #i2 )
            case Terminal_Commits_ARQC
            solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i2 )
              case Terminal_Bank_Network_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Terminal_Commits_TC
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                          'ODCVM', 
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'ODCVM', 'HHMMSS'>, 
                                          ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                         supportedCVM.1, ~channelID.1, t
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.53 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                       ~privkBank)
             ) @ #vk.24 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( (∀ #j.
                 (Running( ~PAN, 'Terminal',
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                  ) @ #j)
                ⇒
                 ¬(#j < #i))  ∥
               (∃ T2 P2 #i2.
                 (Commit( T2, P2,
                          <'Card', 'Terminal', ~PAN, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                  ) @ #i2)
                ∧
                 ¬(#i2 = #i)) )
          case case_1
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.33 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.59 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( T2, P2,
                         <'Card', 'Terminal', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>
                 ) @ #i2 )
            case Terminal_Commits_ARQC
            solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                         <'ARC', ARPC>
                   ) ▶₂ #i2 )
              case Terminal_Bank_Network_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Bank_Network_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.3, DH, 
                                       t.3, AC.1, IAD.1>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.38 )
                case Bank_Receives_AC_case_1
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_2
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              next
                case Bank_Receives_AC_case_3
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                 'ODCVM', 
                                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                  'TVR', 'ODCVM', 'HHMMSS'>, 
                                                 ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                supportedCVM.1, ~channelID.1, t
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Terminal_Commits_TC
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                          'ODCVM', 
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'ODCVM', 'HHMMSS'>, 
                                          ATC, <'SDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                         supportedCVM.1, ~channelID.1, t
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkBank ) @ #vk.54 )
          case Compromise_Bank
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~privkCA ) @ #vk.39 )
        case Compromise_CA
        by contradiction /* from formulas */
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_8
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.10 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.30 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( (∀ #j.
                   (Running( ~PAN, 'Terminal',
                             <'Card', 'Terminal', ~PAN, 
                              <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                    ) @ #j)
                  ⇒
                   ¬(#j < #i))  ∥
                 (∃ T2 P2 #i2.
                   (Commit( T2, P2,
                            <'Card', 'Terminal', ~PAN, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                    ) @ #i2)
                  ∧
                   ¬(#i2 = #i)) )
            case case_1
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.54 )
              case c_MAC
              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                     ) @ #vk.75 )
                case c_kdf
                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                qed
              qed
            qed
          next
            case case_2
            solve( Commit( T2, P2,
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                   ) @ #i2 )
              case Terminal_Commits_ARQC
              solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i2 )
                case Terminal_Bank_Network_case_1
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        'Null', ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              qed
            next
              case Terminal_Commits_TC
              solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                           <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                            'ODCVM', 
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'ODCVM', 'HHMMSS'>, 
                                            ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                           supportedCVM, ~channelID.1, t
                     ) ▶₀ #i2 )
                case Terminal_Receives_AC_NoCDA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.72 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( (∀ #j.
                   (Running( ~PAN, 'Terminal',
                             <'Card', 'Terminal', ~PAN, 
                              <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                    ) @ #j)
                  ⇒
                   ¬(#j < #i))  ∥
                 (∃ T2 P2 #i2.
                   (Commit( T2, P2,
                            <'Card', 'Terminal', ~PAN, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                    ) @ #i2)
                  ∧
                   ¬(#i2 = #i)) )
            case case_1
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.53 )
              case c_MAC
              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                     ) @ #vk.76 )
                case c_kdf
                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                qed
              qed
            qed
          next
            case case_2
            solve( Commit( T2, P2,
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                   ) @ #i2 )
              case Terminal_Commits_ARQC
              solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i2 )
                case Terminal_Bank_Network_case_1
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        'Null', ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              qed
            next
              case Terminal_Commits_TC
              solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                           <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                            'ODCVM', 
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'ODCVM', 'HHMMSS'>, 
                                            ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                           supportedCVM, ~channelID.1, t
                     ) ▶₀ #i2 )
                case Terminal_Receives_AC_NoCDA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.73 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( (∀ #j.
                   (Running( ~PAN, 'Terminal',
                             <'Card', 'Terminal', ~PAN, 
                              <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                              <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                               'ODCVM', 'HHMMSS'>, 
                              ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                    ) @ #j)
                  ⇒
                   ¬(#j < #i))  ∥
                 (∃ T2 P2 #i2.
                   (Commit( T2, P2,
                            <'Card', 'Terminal', ~PAN, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                    ) @ #i2)
                  ∧
                   ¬(#i2 = #i)) )
            case case_1
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.53 )
              case c_MAC
              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                     ) @ #vk.76 )
                case c_kdf
                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                qed
              qed
            qed
          next
            case case_2
            solve( Commit( T2, P2,
                           <'Card', 'Terminal', ~PAN, 
                            <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>
                   ) @ #i2 )
              case Terminal_Commits_ARQC
              solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i2 )
                case Terminal_Bank_Network_case_1
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        'Null', ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                        <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                         <<$amount.1, country, currency, date, type, UN.1>, CDOL1>, ATC.4, 
                                         DH, t.4, AC.1, IAD.1>,
                                        aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                       ) ▶₀ #vr.48 )
                  case Bank_Receives_AC_case_1
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_2
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                next
                  case Bank_Receives_AC_case_3
                  by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                  <~PAN, 
                                                   <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                                   'ODCVM', 
                                                   <
                                                    <$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN
                                                    >, 
                                                    'TVR', 'ODCVM', 'HHMMSS'>, 
                                                   ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                                  supportedCVM, ~channelID.1, t
                            ) ▶₀ #i2 )
                qed
              qed
            next
              case Terminal_Commits_TC
              solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                           <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                            'ODCVM', 
                                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                             'TVR', 'ODCVM', 'HHMMSS'>, 
                                            ATC, <'DDA', 'ODCVM', $furtherData>, t, AC, IAD>,
                                           supportedCVM, ~channelID.1, t
                     ) ▶₀ #i2 )
                case Terminal_Receives_AC_NoCDA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.73 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.64 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.31 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.58 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.66 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.67 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.55 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma auth_to_terminal_minimal_dh:
  all-traces
  "∀ T P DH #i.
    ((∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b)) ∧
     (Commit_DH( T, P, DH ) @ #i)) ⇒
    ((∃ #j. Running_DH( P, T, DH ) @ #j) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ T P DH #i.
  (Commit_DH( T, P, DH ) @ #i)
 ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #j. (Running_DH( P, T, DH ) @ #j) ⇒ ⊥) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit_DH( T, P, DH ) @ #i )
  case Terminal_Commits_ARQC
  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
               <'ARC', ARPC>
         ) ▶₂ #i )
    case Terminal_Bank_Network_case_1
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            'Null', ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                 ) @ #vk.10 )
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.47 )
              case c_f
              solve( !KU( ~MK ) @ #vk.68 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                 ) @ #vk.10 )
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.58 )
              case c_f
              solve( !KU( ~MK ) @ #vk.79 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( !KU( sign(<'05', nc, 'ARQC', 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 'ARQC', ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.18 )
              case Card_Responds_To_GenerateAC_CDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.48 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                  'ODCVM', $furtherData>,
                                 ~privkBank)
                       ) @ #vk.54 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( ~privkCard ) @ #vk.85 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.89 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.89 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( !KU( sign(<'05', nc, 'ARQC', 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 'ARQC', ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.17 )
              case c_sign
              solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.46 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                  'ODCVM', $furtherData>,
                                 ~privkBank)
                       ) @ #vk.52 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( ~privkCard ) @ #vk.86 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.90 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.90 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.59 )
              case c_f
              solve( !KU( ~MK ) @ #vk.76 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Bank_Network_case_2
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                             <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                             ATC.1, DH, t.1, AC.1, IAD.1>,
                            aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
           ) ▶₀ #vr.2 )
      case Bank_Receives_AC_case_1
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'OnlinePIN', 'HHMMSS'>, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                 ) @ #vk.10 )
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.47 )
              case c_f
              solve( !KU( ~MK ) @ #vk.68 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_NoCDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'OnlinePIN', 'HHMMSS'>, 
                           <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                 ) @ #vk.10 )
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.58 )
              case c_f
              solve( !KU( ~MK ) @ #vk.79 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                   <~PAN, <'CDA', furtherData>, CVM, 
                                    <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                    <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                   supportedCVM, ~channelID, t
             ) ▶₀ #i )
        case Terminal_Receives_AC_CDA
        solve( !Value( $amount, 'High' ) ▶₁ #i )
          case Generate_Amount_High
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'OnlinePIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( !KU( sign(<'05', nc, 'ARQC', 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 'ARQC', ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.17 )
              case Card_Responds_To_GenerateAC_CDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                $furtherData>,
                               ~privkBank)
                     ) @ #vk.52 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.85 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( !KU( sign(<'05', nc, 'ARQC', 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 'ARQC', ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.16 )
              case c_sign
              solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                $furtherData>,
                               ~privkBank)
                     ) @ #vk.50 )
                case Card_Responds_To_ReadRecord_NotDDA
                solve( !KU( ~privkCard ) @ #vk.86 )
                  case Compromise_Card
                  by contradiction /* from formulas */
                qed
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
              case c_f
              solve( !KU( ~MK ) @ #vk.74 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Terminal_Commits_TC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                               <~PAN, <'CDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                               supportedCVM, ~channelID, t
         ) ▶₀ #i )
    case Terminal_Receives_AC_CDA_case_1
    by solve( !Value( $amount, 'High' ) ▶₁ #i )
  next
    case Terminal_Receives_AC_CDA_case_2
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_4
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !KU( sign(<'05', nc, 'TC', AC, 
                        h(<
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                        ~UN>,
                       x)
             ) @ #vk.9 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( MAC(f(~MK, ~ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>)
               ) @ #vk.8 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                              'CDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.81 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.81 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ~ATC) ) @ #vk.85 )
            case c_f
            solve( !KU( ~MK ) @ #vk.89 )
              case Compromise_Bank_Card_ShK
              solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.39 )
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.90 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case Card_Responds_To_InternalAuthenticate
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.44 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.70 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.35 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( ~privkCard ) @ #vk.59 )
              case Compromise_Card
              by contradiction /* from formulas */
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.60 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_1
    by solve( !Value( $amount, 'High' ) ▶₁ #i )
  next
    case Terminal_Receives_AC_NoCDA_case_2
    by solve( !Value( $amount, 'High' ) ▶₁ #i )
  next
    case Terminal_Receives_AC_NoCDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_4
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_5
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_6
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_7
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.24 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                 ) @ #vk.32 )
            case c_MAC
            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                   ) @ #vk.50 )
              case c_kdf
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.52 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.54 )
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                         ~privkBank)
               ) @ #vk.24 )
          case c_sign
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~privkCA ) @ #vk.39 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_8
    solve( !Value( $amount, 'High' ) ▶₁ #i )
      case Generate_Amount_High
      solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.10 )
        case Card_Responds_To_InternalAuthenticate
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.31 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'DDA', 'ODCVM', Secret>,
                           ~privkBank)
                 ) @ #vk.41 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.51 )
              case c_MAC
              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                     ) @ #vk.63 )
                case c_kdf
                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.64 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.64 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.32 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                            'ODCVM', Secret>,
                           ~privkBank)
                 ) @ #vk.43 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( ~privkCard ) @ #vk.56 )
              case Compromise_Card
              by contradiction /* from formulas */
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                            'ODCVM', Secret>,
                           ~privkBank)
                 ) @ #vk.42 )
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                            'ODCVM', Secret>,
                           ~privkBank)
                 ) @ #vk.42 )
            case Card_Responds_To_ReadRecord_NotDDA
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.55 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_terminal_dh:
  all-traces
  "∀ T P DH #i.
    (Commit_DH( T, P, DH ) @ #i) ⇒
    (((∃ #j. (Running_DH( P, T, DH ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ T2 P2 #i2. (Commit_DH( T2, P2, DH ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ T P DH #i.
  (Commit_DH( T, P, DH ) @ #i)
 ∧
  (((∀ #j. (Running_DH( P, T, DH ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ T2 P2 #i2. (Commit_DH( T2, P2, DH ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( (∀ #j. (Running_DH( P, T, DH ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∃ T2 P2 #i2. (Commit_DH( T2, P2, DH ) @ #i2) ∧ ¬(#i2 = #i)) )
  case case_1
  solve( Commit_DH( T, P, DH ) @ #i )
    case Terminal_Commits_ARQC
    solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                 <'ARC', ARPC>
           ) ▶₂ #i )
      case Terminal_Bank_Network_case_1
      solve( Bank_Checked_AC( $Bank, $Terminal,
                              <~PAN.1, <'CDA', furtherData.1>, CVM.1, 
                               <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                               ATC.1, DH, t.1, AC.1, IAD.1>,
                              'Null', ~channelID, ARPC
             ) ▶₀ #vr.2 )
        case Bank_Receives_AC_case_1
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_NoCDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( !KU( MAC(f(~MK, ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                   ) @ #vk.10 )
              case c_MAC
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.67 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.68 )
              qed
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_2
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_NoCDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( !KU( MAC(f(~MK, ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                   ) @ #vk.10 )
              case c_MAC
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
              qed
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_3
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_CDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( !KU( MAC(f(~MK, ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                   ) @ #vk.10 )
              case Card_Responds_To_GenerateAC_CDA
              solve( !KU( sign(<'05', nc, 'ARQC', 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   'ARQC', ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.18 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.47 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.53 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.53 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.53 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.96 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.48 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.54 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.89 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.98 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.54 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.89 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.98 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.54 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.89 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.98 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.89 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case Card_Responds_To_GenerateAC_NoCDA
              solve( !KU( sign(<'05', nc, 'ARQC', 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   'ARQC', ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.17 )
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.45 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.51 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.97 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.46 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.90 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.99 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.90 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.99 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.52 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.90 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.99 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.90 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( f(~MK, ATC) ) @ #vk.59 )
                case c_f
                solve( !KU( ~MK ) @ #vk.76 )
                  case Compromise_Bank_Card_ShK
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Terminal_Bank_Network_case_2
      solve( Bank_Checked_AC( $Bank, $Terminal,
                              <~PAN.1, <'CDA', furtherData.1>, 'OnlinePIN', 
                               <<$amount.1, country.1, currency.1, date.1, type.1, UN.1>, CDOL1.1>, 
                               ATC.1, DH, t.1, AC.1, IAD.1>,
                              aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
             ) ▶₀ #vr.2 )
        case Bank_Receives_AC_case_1
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_NoCDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( !KU( MAC(f(~MK, ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'OnlinePIN', 'HHMMSS'>, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                   ) @ #vk.10 )
              case c_MAC
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.67 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.68 )
              qed
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_2
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_NoCDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( !KU( MAC(f(~MK, ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'OnlinePIN', 'HHMMSS'>, 
                             <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                   ) @ #vk.10 )
              case c_MAC
              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
              qed
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_3
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_CDA
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( !KU( MAC(f(~MK, ATC),
                            <
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'OnlinePIN', 'HHMMSS'>, 
                             <'CDA', furtherData>, ATC, IAD>)
                   ) @ #vk.10 )
              case Card_Responds_To_GenerateAC_CDA
              solve( !KU( sign(<'05', nc, 'ARQC', 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   'ARQC', ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.17 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, 'OnlinePIN', 
                                  'CDA', ODCVM, $furtherData>,
                                 ~privkBank)
                       ) @ #vk.51 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.96 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                  $furtherData>,
                                 ~privkBank)
                       ) @ #vk.52 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( ~privkCard ) @ #vk.87 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.89 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case Card_Responds_To_GenerateAC_NoCDA
              solve( !KU( sign(<'05', nc, 'ARQC', 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   'ARQC', ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.16 )
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                                  ODCVM, $furtherData>,
                                 ~privkBank)
                       ) @ #vk.49 )
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.97 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                  $furtherData>,
                                 ~privkBank)
                       ) @ #vk.50 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( ~privkCard ) @ #vk.88 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.90 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( f(~MK, ATC) ) @ #vk.57 )
                case c_f
                solve( !KU( ~MK ) @ #vk.74 )
                  case Compromise_Bank_Card_ShK
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Commits_TC
    solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                 <~PAN, <'CDA', furtherData>, CVM, 
                                  <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                  <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                 supportedCVM, ~channelID, t
           ) ▶₀ #i )
      case Terminal_Receives_AC_CDA_case_1
      by solve( !Value( $amount, 'High' ) ▶₁ #i )
    next
      case Terminal_Receives_AC_CDA_case_2
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_CDA_case_3
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_CDA_case_4
      solve( !Value( $amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !KU( sign(<'05', nc, 'TC', AC, 
                          h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                          ~UN>,
                         x)
               ) @ #vk.9 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.66 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.56 )
              case Card_Ext_Responds_To_Hello
              solve( !KU( MAC(f(~MK, ~ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>)
                     ) @ #vk.14 )
                case Card_Responds_To_GenerateAC_CDA
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.39 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.50 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.90 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.50 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.90 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                    'CDA', 'ODCVM', furtherData2>,
                                   ~privkBank)
                         ) @ #vk.50 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.90 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.81 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_MAC
                solve( !KU( f(~MK, ~ATC) ) @ #vk.85 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.89 )
                    case Compromise_Bank_Card_ShK
                    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.44 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', furtherData2>,
                                       ~privkBank)
                             ) @ #vk.56 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.99 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', furtherData2>,
                                       ~privkBank)
                             ) @ #vk.56 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.99 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', furtherData2>,
                                       ~privkBank)
                             ) @ #vk.56 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.99 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.90 )
                        case Compromise_CA
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.82 )
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                              'CDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.44 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.78 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                              'CDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.44 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.79 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                              'CDA', 'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.44 )
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.79 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.70 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.35 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                              'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.60 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.72 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                              'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.60 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.72 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                              'ODCVM', furtherData2>,
                             ~privkBank)
                   ) @ #vk.45 )
              case Card_Responds_To_ReadRecord_NotDDA
              solve( !KU( ~privkCard ) @ #vk.60 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.72 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.60 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_1
      by solve( !Value( $amount, 'High' ) ▶₁ #i )
    next
      case Terminal_Receives_AC_NoCDA_case_2
      by solve( !Value( $amount, 'High' ) ▶₁ #i )
    next
      case Terminal_Receives_AC_NoCDA_case_3
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_4
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_5
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_6
      by contradiction /* from formulas */
    next
      case Terminal_Receives_AC_NoCDA_case_7
      solve( !Value( $amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.22 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                           ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.33 )
              case c_MAC
              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.60 )
                case Terminal_Ext_Sends_Hello
                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                       ) @ #vk.60 )
                  case c_kdf
                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                           ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.33 )
              case c_MAC
              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                case Terminal_Ext_Sends_Hello
                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                       ) @ #vk.59 )
                  case c_kdf
                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.53 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                           ~privkBank)
                 ) @ #vk.24 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                   ) @ #vk.33 )
              case c_MAC
              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.60 )
                case Terminal_Ext_Sends_Hello
                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                       ) @ #vk.60 )
                  case c_kdf
                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.61 )
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.63 )
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkBank ) @ #vk.54 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~privkCA ) @ #vk.39 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Terminal_Receives_AC_NoCDA_case_8
      solve( !Value( $amount, 'High' ) ▶₁ #i )
        case Generate_Amount_High
        solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.10 )
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.31 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                              'DDA', 'ODCVM', Secret>,
                             ~privkBank)
                   ) @ #vk.42 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                     ) @ #vk.54 )
                case c_MAC
                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                  case Terminal_Ext_Sends_Hello
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.76 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                    qed
                  qed
                next
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.72 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                              'DDA', 'ODCVM', Secret>,
                             ~privkBank)
                   ) @ #vk.41 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                     ) @ #vk.53 )
                case c_MAC
                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.77 )
                  case Terminal_Ext_Sends_Hello
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.77 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                    qed
                  qed
                next
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.73 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                              'DDA', 'ODCVM', Secret>,
                             ~privkBank)
                   ) @ #vk.41 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                     ) @ #vk.53 )
                case c_MAC
                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.77 )
                  case Terminal_Ext_Sends_Hello
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.77 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.78 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.80 )
                    qed
                  qed
                next
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.73 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.64 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.32 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                              'ODCVM', Secret>,
                             ~privkBank)
                   ) @ #vk.43 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCard ) @ #vk.58 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                              'ODCVM', Secret>,
                             ~privkBank)
                   ) @ #vk.42 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCard ) @ #vk.57 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.67 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                              'ODCVM', Secret>,
                             ~privkBank)
                   ) @ #vk.42 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCard ) @ #vk.57 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.67 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~privkCA ) @ #vk.55 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( (#i2 < #i)  ∥ (#i < #i2) )
    case case_1
    solve( Commit_DH( T, P, DH ) @ #i )
      case Terminal_Commits_ARQC
      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                   <'ARC', ARPC>
             ) ▶₂ #i )
        case Terminal_Bank_Network_case_1
        solve( Commit_DH( T2, P2, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>
               ) @ #i2 )
          case Terminal_Commits_ARQC
          solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                       <'ARC', ARPC.1>
                 ) ▶₂ #i2 )
            case Terminal_Bank_Network_case_1
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    'Null', ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.100 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.121 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.122 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case Terminal_Bank_Network_case_2
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    'Null', ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.100 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.121 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.122 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk ) @ #vk.93 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                          case Terminal_Ext_Sends_Hello
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                                 ) @ #vk.17 )
                            case Card_Responds_To_GenerateAC_CDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.85 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.146 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.147 )
                              qed
                            qed
                          next
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.84 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.147 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.148 )
                              qed
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.107 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.124 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            qed
          qed
        next
          case Terminal_Commits_TC
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  'Null', ~channelID, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC, 
                                              IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_5
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case Terminal_Bank_Network_case_2
        solve( Commit_DH( T2, P2, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>
               ) @ #i2 )
          case Terminal_Commits_ARQC
          solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                       <'ARC', ARPC.1>
                 ) ▶₂ #i2 )
            case Terminal_Bank_Network_case_1
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, CVM.3, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.100 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk.1 ) @ #vk.93 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.94 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, CVM.3, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.121 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.122 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.127 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.128 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, CVM.3, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            qed
          next
            case Terminal_Bank_Network_case_2
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.99 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk.1 ) @ #vk.90 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.91 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.119 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.120 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.124 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.125 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk ) @ #vk.90 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.99 )
                          case Terminal_Ext_Sends_Hello
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'CDA', furtherData>, ATC, IAD>)
                                 ) @ #vk.17 )
                            case Card_Responds_To_GenerateAC_CDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.85 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.143 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.144 )
                              qed
                            qed
                          next
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.84 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.144 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.145 )
                              qed
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.104 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.121 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Terminal_Commits_TC
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                             supportedCVM, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_CDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( 'SDA'^~Terminal_Eph_Sk.1 ) @ #vk.50 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.90 )
                    qed
                  qed
                next
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                             supportedCVM, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_CDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.123 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                      qed
                    qed
                  qed
                next
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC, 
                                              IAD.1>,
                                             supportedCVM, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_5
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Terminal_Commits_TC
      solve( Commit_DH( T2, P2, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>
             ) @ #i2 )
        case Terminal_Commits_ARQC
        solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                     <'ARC', ARPC>
               ) ▶₂ #i2 )
          case Terminal_Bank_Network_case_1
          solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                  <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  'Null', ~channelID.1, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          qed
        next
          case Terminal_Bank_Network_case_2
          solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                  <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  aenc(~PIN, pk(~privkBank)), ~channelID.1, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC.1, 
                                              IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( 'SDA'^~Terminal_Eph_Sk ) @ #vk.89 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC.1, 
                                              IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.98 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( MAC(f(~MK, ATC.1),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1
                                      >)
                             ) @ #vk.11 )
                        case c_MAC
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.123 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.124 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          qed
        qed
      next
        case Terminal_Commits_TC
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_CDA_case_1
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case Terminal_Receives_AC_CDA_case_2
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_CDA_case_3
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_CDA_case_4
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                         <~PAN.1, <'CDA', furtherData>, CVM, 
                                          <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, ATC.1, 
                                          <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC.1, IAD.1>,
                                         supportedCVM.1, ~channelID.1, t.1
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_CDA
              by contradiction /* cyclic */
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            qed
          qed
        next
          case Terminal_Receives_AC_NoCDA_case_1
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case Terminal_Receives_AC_NoCDA_case_2
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case Terminal_Receives_AC_NoCDA_case_3
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_4
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_5
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_6
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_7
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN.1, <'CDA', furtherData>, CVM, 
                                          <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, ATC.1, 
                                          <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                         supportedCVM.1, ~channelID.1, t.1
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                case Generate_Amount_High
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                                   ~privkBank)
                         ) @ #vk.28 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.66 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.104 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.104 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.105 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.98 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.102 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA.1 ) @ #vk.86 )
                        case Compromise_CA
                        solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.69 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.46 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.96 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.96 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.97 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.45 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.94 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.95 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.82 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                                   ~privkBank)
                         ) @ #vk.28 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.67 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.71 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.102 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.96 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.100 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.100 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.101 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA.1 ) @ #vk.85 )
                        case Compromise_CA
                        solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.70 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.46 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.95 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.95 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.96 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.45 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.93 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.93 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.94 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.95 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.81 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                                   ~privkBank)
                         ) @ #vk.28 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.66 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.104 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.104 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.105 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.98 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.102 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.104 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.104 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.105 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.98 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.102 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA.1 ) @ #vk.86 )
                        case Compromise_CA
                        solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.69 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.46 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.96 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.96 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.97 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.45 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.94 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.95 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.82 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.67 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Terminal_Receives_AC_NoCDA_case_8
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN.1, <'CDA', furtherData>, CVM, 
                                          <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, ATC.1, 
                                          <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                         supportedCVM.1, ~channelID.1, t.1
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                case Generate_Amount_High
                solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'DDA', 'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.54 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'05', nc.1, ~UN.1>, x.1) ) @ #vk.80 )
                        case Card_Responds_To_InternalAuthenticate
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.91 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.96 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.80 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.134 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.130 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.133 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.133 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.134 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.135 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.122 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                              'DDA', 'ODCVM', $furtherData>,
                                             x)
                                   ) @ #vk.95 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.127 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.126 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.126 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.127 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.128 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.90 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.96 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.80 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.133 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.133 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.134 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.135 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.125 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.128 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.128 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.129 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.120 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.120 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.117 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                              'ODCVM', $furtherData>,
                                             x.1)
                                   ) @ #vk.95 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( ~privkCard.2 ) @ #vk.119 )
                                case Compromise_Card
                                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                       ) @ #vk.79 )
                                  case c_MAC
                                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.126 )
                                    case Terminal_Ext_Sends_Hello
                                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                           ) @ #vk.126 )
                                      case c_kdf
                                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.127 )
                                        case c_exp
                                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                      qed
                                    qed
                                  next
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.128 )
                                  qed
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.121 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.121 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.122 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.123 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.110 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'DDA', 'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.53 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'05', nc.1, ~UN.1>, x.1) ) @ #vk.79 )
                        case Card_Responds_To_InternalAuthenticate
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.90 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.136 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.136 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.137 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.139 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.132 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.123 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                              'DDA', 'ODCVM', $furtherData>,
                                             x)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.128 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.128 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.129 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.127 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.89 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.1 ) @ #vk.122 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.1 ) @ #vk.122 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.1 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.127 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.130 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.130 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.131 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.133 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.118 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                              'ODCVM', $furtherData>,
                                             x.1)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( ~privkCard.1 ) @ #vk.120 )
                                case Compromise_Card
                                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                       ) @ #vk.78 )
                                  case c_MAC
                                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                    case Terminal_Ext_Sends_Hello
                                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                           ) @ #vk.127 )
                                      case c_kdf
                                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                        case c_exp
                                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                      qed
                                    qed
                                  next
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                  qed
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.74 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.122 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.122 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.123 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.125 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.111 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'DDA', 'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.53 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'05', nc.1, ~UN.1>, x.1) ) @ #vk.79 )
                        case Card_Responds_To_InternalAuthenticate
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.90 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.136 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.136 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.137 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.139 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.132 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.136 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.136 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.137 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.139 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.132 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.123 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                              'DDA', 'ODCVM', $furtherData>,
                                             x)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.128 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.128 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.129 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.127 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.89 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.122 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.127 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.130 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.130 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.131 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.133 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.127 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.130 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.130 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.131 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.133 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.118 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                              'ODCVM', $furtherData>,
                                             x.1)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( ~privkCard.2 ) @ #vk.120 )
                                case Compromise_Card
                                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                       ) @ #vk.78 )
                                  case c_MAC
                                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                    case Terminal_Ext_Sends_Hello
                                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                           ) @ #vk.127 )
                                      case c_kdf
                                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                        case c_exp
                                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                      qed
                                    qed
                                  next
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                  qed
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.74 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.122 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.122 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.123 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.125 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.111 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.102 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.36 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                      'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.55 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( ~privkCard ) @ #vk.96 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.104 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                      'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.54 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( ~privkCard ) @ #vk.95 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.105 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                      'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.54 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( ~privkCard ) @ #vk.95 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.105 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.93 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Commit_DH( T, P, DH ) @ #i )
      case Terminal_Commits_ARQC
      solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                   <'ARC', ARPC>
             ) ▶₂ #i )
        case Terminal_Bank_Network_case_1
        solve( Commit_DH( T2, P2, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>
               ) @ #i2 )
          case Terminal_Commits_ARQC
          solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                       <'ARC', ARPC.1>
                 ) ▶₂ #i2 )
            case Terminal_Bank_Network_case_1
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    'Null', ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.100 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.121 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.122 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, CVM.2, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case Terminal_Bank_Network_case_2
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    'Null', ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.100 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.121 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.122 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.2>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.8 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk ) @ #vk.93 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM.1, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                          case Terminal_Ext_Sends_Hello
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                                 ) @ #vk.17 )
                            case Card_Responds_To_GenerateAC_CDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.85 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.146 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.147 )
                              qed
                            qed
                          next
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.84 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.147 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.148 )
                              qed
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.107 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.124 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM.1, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            qed
          qed
        next
          case Terminal_Commits_TC
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  'Null', ~channelID, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC, 
                                              IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_5
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case Terminal_Bank_Network_case_2
        solve( Commit_DH( T2, P2, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>
               ) @ #i2 )
          case Terminal_Commits_ARQC
          solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                       <'ARC', ARPC.1>
                 ) ▶₂ #i2 )
            case Terminal_Bank_Network_case_1
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, CVM.3, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.100 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk.1 ) @ #vk.93 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.94 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, CVM.3, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.121 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.122 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.11 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.127 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.128 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, CVM.3, 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      'Null', ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                    'ARQC',
                                                    <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                     AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              qed
            qed
          next
            case Terminal_Bank_Network_case_2
            solve( Bank_Checked_AC( $Bank, $Terminal,
                                    <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                     <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                     ATC.2, DH, t.2, AC.2, IAD.2>,
                                    aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
                   ) ▶₀ #vr.2 )
              case Bank_Receives_AC_case_1
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.99 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk.1 ) @ #vk.90 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.91 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_2
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                    <~PAN.1, <'CDA', furtherData>, CVM, 
                                                     <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1
                                                     >, 
                                                     ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                    supportedCVM, ~channelID.1, t.1
                              ) ▶₀ #i2 )
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.119 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.120 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( MAC(f(~MK, ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                               ) @ #vk.16 )
                          case c_MAC
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.124 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.125 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Bank_Receives_AC_case_3
              solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                      <~PAN.3, <'CDA', furtherData.4>, 'OnlinePIN', 
                                       <<$amount.3, country.2, currency.2, date.2, type.2, UN.3>, CDOL1.2>, 
                                       ATC.3, DH, t.3, AC.2, IAD.3>,
                                      aenc(~PIN.1, pk(~privkBank.1)), ~channelID.1, ARPC
                     ) ▶₀ #vr.10 )
                case Bank_Receives_AC_case_1
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'SDA'^~Terminal_Eph_Sk ) @ #vk.90 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_2
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_NoCDA
                      solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                        case Generate_Amount_High
                        solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.99 )
                          case Terminal_Ext_Sends_Hello
                          solve( !KU( MAC(f(~MK, ATC),
                                          <
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           <'CDA', furtherData>, ATC, IAD>)
                                 ) @ #vk.17 )
                            case Card_Responds_To_GenerateAC_CDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.85 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.143 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.144 )
                              qed
                            qed
                          next
                            case Card_Responds_To_GenerateAC_NoCDA
                            solve( !KU( MAC(f(~MK.1, ATC.1),
                                            <
                                             <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                              'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                             <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, 
                                             ATC.1, IAD>)
                                   ) @ #vk.84 )
                              case c_MAC
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.144 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.145 )
                              qed
                            qed
                          next
                            case c_MAC
                            solve( !KU( f(~MK, ATC) ) @ #vk.104 )
                              case c_f
                              solve( !KU( ~MK ) @ #vk.121 )
                                case Compromise_Bank_Card_ShK
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Bank_Receives_AC_case_3
                solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                             <~PAN, <'CDA', furtherData>, CVM, 
                                              <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                              <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                             supportedCVM, ~channelID, t
                       ) ▶₀ #i )
                  case Terminal_Receives_AC_CDA
                  solve( !Value( $amount, 'High' ) ▶₁ #i )
                    case Generate_Amount_High
                    solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                                 <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                                  <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                  ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                  AC, IAD.1>,
                                                 supportedCVM, ~channelID.1, t.1
                           ) ▶₀ #i2 )
                      case Terminal_Receives_AC_CDA
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Terminal_Commits_TC
          solve( Bank_Checked_AC( $Bank, $Terminal,
                                  <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  aenc(~PIN, pk(~privkBank)), ~channelID, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                             supportedCVM, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_CDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( 'SDA'^~Terminal_Eph_Sk.1 ) @ #vk.50 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.90 )
                    qed
                  qed
                next
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_NoCDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', Terminal_Eph_Pk, Secret>, t.1, AC, IAD.1>,
                                             supportedCVM, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_CDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_CDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_CDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.123 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                      qed
                    qed
                  qed
                next
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                             <~PAN.1, <'CDA', furtherData.1>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC, 
                                              IAD.1>,
                                             supportedCVM, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA_case_1
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_2
                  by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                next
                  case Terminal_Receives_AC_NoCDA_case_3
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_4
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_5
                  by contradiction /* from formulas */
                next
                  case Terminal_Receives_AC_NoCDA_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Terminal_Commits_TC
      solve( Commit_DH( T2, P2, <Card_Eph_Pk, Terminal_Eph_Pk, Secret>
             ) @ #i2 )
        case Terminal_Commits_ARQC
        solve( Recv( $Bank.1, $Terminal.1, <~channelID.1, 'Mastercard', '2'>,
                     <'ARC', ARPC>
               ) ▶₂ #i2 )
          case Terminal_Bank_Network_case_1
          solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                  <~PAN.2, <'CDA', furtherData.2>, CVM.2, 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  'Null', ~channelID.1, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          qed
        next
          case Terminal_Bank_Network_case_2
          solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                  <~PAN.2, <'CDA', furtherData.2>, 'OnlinePIN', 
                                   <<$amount.2, country.2, currency.2, date.2, type.2, UN.2>, CDOL1.2>, 
                                   ATC.2, DH, t.2, AC.2, IAD.2>,
                                  aenc(~PIN, pk(~privkBank)), ~channelID.1, ARPC
                 ) ▶₀ #vr.2 )
            case Bank_Receives_AC_case_1
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC.1, 
                                              IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( 'SDA'^~Terminal_Eph_Sk ) @ #vk.89 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.96 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.97 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          next
            case Bank_Receives_AC_case_2
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC.1, 
                                              IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.98 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( MAC(f(~MK, ATC.1),
                                      <
                                       <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 
                                        'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1
                                      >)
                             ) @ #vk.11 )
                        case c_MAC
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.123 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.124 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.101 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                             <~PAN.1, <'CDA', furtherData>, CVM, 
                                              <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                              ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                             supportedCVM.1, ~channelID.1, t.1
                       ) ▶₀ #i2 )
                  case Terminal_Receives_AC_NoCDA
                  solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                    case Generate_Amount_High
                    solve( !KU( MAC(f(~MK, ATC.1),
                                    <
                                     <<$amount.1, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN.1>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', 'g'^~Terminal_Eph_Sk.1, 'CDA'^~Terminal_Eph_Sk.1>, ATC.1, IAD.1>)
                           ) @ #vk.10 )
                      case c_MAC
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk.1 ) @ #vk.117 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk.1 ) @ #vk.118 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Bank_Receives_AC_case_3
            solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                         <~PAN, <'CDA', furtherData>, CVM, 
                                          <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                          <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                         supportedCVM, ~channelID, t
                   ) ▶₀ #i )
              case Terminal_Receives_AC_CDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_CDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_CDA_case_4
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1,
                                                'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, 
                                                 AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount, 'High' ) ▶₁ #i )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_7
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            next
              case Terminal_Receives_AC_NoCDA_case_8
              solve( !Value( $amount, 'High' ) ▶₁ #i )
                case Generate_Amount_High
                by solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'ARQC',
                                                <~PAN.1, <'CDA', furtherData>, CVM, 
                                                 <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, 
                                                 ATC.1, <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                                supportedCVM.1, ~channelID.1, t.1
                          ) ▶₀ #i2 )
              qed
            qed
          qed
        qed
      next
        case Terminal_Commits_TC
        solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                                     <~PAN, <'CDA', furtherData>, CVM, 
                                      <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                      <Card_Eph_Pk, Terminal_Eph_Pk, Secret>, t, AC, IAD>,
                                     supportedCVM, ~channelID, t
               ) ▶₀ #i )
          case Terminal_Receives_AC_CDA_case_1
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case Terminal_Receives_AC_CDA_case_2
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_CDA_case_3
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_CDA_case_4
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc.1, 'TC',
                                         <~PAN.1, <'CDA', furtherData>, CVM, 
                                          <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, ATC.1, 
                                          <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t.1, AC.1, IAD.1>,
                                         supportedCVM.1, ~channelID.1, t.1
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_CDA
              by contradiction /* cyclic */
            next
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_5
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_6
              by contradiction /* from formulas */
            qed
          qed
        next
          case Terminal_Receives_AC_NoCDA_case_1
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case Terminal_Receives_AC_NoCDA_case_2
          by solve( !Value( $amount, 'High' ) ▶₁ #i )
        next
          case Terminal_Receives_AC_NoCDA_case_3
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_4
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_5
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_6
          by contradiction /* from formulas */
        next
          case Terminal_Receives_AC_NoCDA_case_7
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN.1, <'CDA', furtherData>, CVM, 
                                          <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, ATC.1, 
                                          <'SDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                         supportedCVM.1, ~channelID.1, t.1
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                case Generate_Amount_High
                solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.25 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                                   ~privkBank)
                         ) @ #vk.28 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.66 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.104 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.104 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.105 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.98 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.102 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA.1 ) @ #vk.86 )
                        case Compromise_CA
                        solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.69 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.46 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.96 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.96 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.97 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.45 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.94 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.95 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.82 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                                   ~privkBank)
                         ) @ #vk.28 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.67 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.71 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.102 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.96 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.100 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.100 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.101 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA.1 ) @ #vk.85 )
                        case Compromise_CA
                        solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.70 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.46 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.95 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.95 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.96 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.45 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.93 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.93 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.94 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.95 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.81 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', Secret>,
                                   ~privkBank)
                         ) @ #vk.28 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.66 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.104 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.104 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.105 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.98 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.102 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.103 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.103 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.104 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.97 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.101 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.101 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.102 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                       ~privkBank.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                        <'g'^~Terminal_Eph_Sk, 'CDA'>)
                               ) @ #vk.46 )
                          case c_MAC
                          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.104 )
                            case Terminal_Ext_Sends_Hello
                            solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                   ) @ #vk.104 )
                              case c_kdf
                              solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.105 )
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
                              qed
                            qed
                          next
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank.1 ) @ #vk.98 )
                          case Compromise_Bank
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.47 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.102 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.102 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.103 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.105 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA.1 ) @ #vk.86 )
                        case Compromise_CA
                        solve( !KU( sign(<'03', ~PAN.1, expDate.2, 'SDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.69 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.46 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.96 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.96 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.97 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                          <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                 ) @ #vk.45 )
                            case c_MAC
                            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
                              case Terminal_Ext_Sends_Hello
                              solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                     ) @ #vk.94 )
                                case c_kdf
                                solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.95 )
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
                                qed
                              qed
                            next
                              case c_exp
                              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.82 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.67 )
                    case Compromise_CA
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Terminal_Receives_AC_NoCDA_case_8
          solve( !Value( $amount, 'High' ) ▶₁ #i )
            case Generate_Amount_High
            solve( Terminal_Received_AC( $Terminal.1, $Bank.1, $CA.1, nc, 'TC',
                                         <~PAN.1, <'CDA', furtherData>, CVM, 
                                          <<$amount.1, country, currency, date, type, ~UN.1>, CDOL1>, ATC.1, 
                                          <'DDA', 'ODCVM', Secret>, t.1, AC.1, IAD.1>,
                                         supportedCVM.1, ~channelID.1, t.1
                   ) ▶₀ #i2 )
              case Terminal_Receives_AC_NoCDA_case_1
              by solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
            next
              case Terminal_Receives_AC_NoCDA_case_2
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_3
              by contradiction /* from formulas */
            next
              case Terminal_Receives_AC_NoCDA_case_4
              solve( !Value( $amount.1, 'High' ) ▶₁ #i2 )
                case Generate_Amount_High
                solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'DDA', 'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.54 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'05', nc.1, ~UN.1>, x.1) ) @ #vk.80 )
                        case Card_Responds_To_InternalAuthenticate
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.91 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.96 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.80 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.134 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.130 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.133 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.133 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.134 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.135 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.122 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                              'DDA', 'ODCVM', $furtherData>,
                                             x)
                                   ) @ #vk.95 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.127 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.126 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.126 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.127 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.128 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.90 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.96 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.80 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.133 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.133 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.134 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.135 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.125 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.128 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.128 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.129 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.120 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.120 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.117 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                              'ODCVM', $furtherData>,
                                             x.1)
                                   ) @ #vk.95 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( ~privkCard.2 ) @ #vk.119 )
                                case Compromise_Card
                                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                       ) @ #vk.79 )
                                  case c_MAC
                                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.126 )
                                    case Terminal_Ext_Sends_Hello
                                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                           ) @ #vk.126 )
                                      case c_kdf
                                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.127 )
                                        case c_exp
                                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                      qed
                                    qed
                                  next
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.128 )
                                  qed
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.121 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.121 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.122 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.123 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.110 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'DDA', 'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.53 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'05', nc.1, ~UN.1>, x.1) ) @ #vk.79 )
                        case Card_Responds_To_InternalAuthenticate
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.90 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.136 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.136 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.137 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.139 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.132 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.123 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.1), $Bank.1, supportedCVM, 
                                              'DDA', 'ODCVM', $furtherData>,
                                             x)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.128 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.128 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.129 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.127 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.89 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.1 ) @ #vk.122 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.1 ) @ #vk.122 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.1 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.127 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.130 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.130 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.131 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.133 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.118 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                              'ODCVM', $furtherData>,
                                             x.1)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( ~privkCard.1 ) @ #vk.120 )
                                case Compromise_Card
                                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                       ) @ #vk.78 )
                                  case c_MAC
                                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                    case Terminal_Ext_Sends_Hello
                                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                           ) @ #vk.127 )
                                      case c_kdf
                                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                        case c_exp
                                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                      qed
                                    qed
                                  next
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                  qed
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.74 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.122 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.122 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.123 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.125 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.111 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'DDA', 'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.53 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'05', nc.1, ~UN.1>, x.1) ) @ #vk.79 )
                        case Card_Responds_To_InternalAuthenticate
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.90 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.79 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.135 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.131 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.136 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.136 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.137 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.139 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.132 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                            'DDA', 'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                            <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                   ) @ #vk.78 )
                              case c_MAC
                              solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.136 )
                                case Terminal_Ext_Sends_Hello
                                solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                       ) @ #vk.136 )
                                  case c_kdf
                                  solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.137 )
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.139 )
                                  qed
                                qed
                              next
                                case c_exp
                                by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.132 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.77 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.123 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(~privkCard.2), $Bank.1, supportedCVM, 
                                              'DDA', 'ODCVM', $furtherData>,
                                             x)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.128 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.128 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.129 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.127 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.89 )
                          case Card_Responds_To_ReadRecord_DDA
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.95 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.122 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.79 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.134 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.134 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.135 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.136 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.126 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.76 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.129 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.129 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.130 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.131 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_1
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.127 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.130 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.130 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.131 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.133 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card_Responds_To_ReadRecord_NotDDA_case_2
                          solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                            'ODCVM', $furtherData>,
                                           ~privkBank.1)
                                 ) @ #vk.94 )
                            case Card_Responds_To_ReadRecord_DDA
                            solve( !KU( ~privkCard.2 ) @ #vk.121 )
                              case Compromise_Card
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.78 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.135 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.135 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.136 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.138 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.137 )
                                qed
                              qed
                            qed
                          next
                            case Card_Responds_To_ReadRecord_NotDDA
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            solve( !KU( ~privkBank.1 ) @ #vk.127 )
                              case Compromise_Bank
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.75 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.130 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.130 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.131 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.133 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.132 )
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_sign
                          solve( !KU( ~privkCA.1 ) @ #vk.118 )
                            case Compromise_CA
                            solve( !KU( sign(<'04', ~PAN.1, pk(x), $Bank.1, supportedCVM, 'DDA', 
                                              'ODCVM', $furtherData>,
                                             x.1)
                                   ) @ #vk.94 )
                              case Card_Responds_To_ReadRecord_DDA
                              solve( !KU( ~privkCard.2 ) @ #vk.120 )
                                case Compromise_Card
                                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                       ) @ #vk.78 )
                                  case c_MAC
                                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.127 )
                                    case Terminal_Ext_Sends_Hello
                                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                           ) @ #vk.127 )
                                      case c_kdf
                                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.128 )
                                        case c_exp
                                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.130 )
                                      qed
                                    qed
                                  next
                                    case c_exp
                                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.129 )
                                  qed
                                qed
                              qed
                            next
                              case Card_Responds_To_ReadRecord_NotDDA
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                                     ) @ #vk.74 )
                                case c_MAC
                                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.122 )
                                  case Terminal_Ext_Sends_Hello
                                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                                         ) @ #vk.122 )
                                    case c_kdf
                                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.123 )
                                      case c_exp
                                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.125 )
                                    qed
                                  qed
                                next
                                  case c_exp
                                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.124 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.111 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.102 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.36 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                      'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.55 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( ~privkCard ) @ #vk.96 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.104 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                      'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.54 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( ~privkCard ) @ #vk.95 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.105 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                                      'ODCVM', Secret>,
                                     ~privkBank)
                           ) @ #vk.54 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( ~privkCard ) @ #vk.95 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA
                      by contradiction /* from formulas */
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.105 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.93 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_bank_minimal:
  all-traces
  "∀ B P r t #i.
    ((∀ #a #b. ((OneCard( ) @ #a) ∧ (OneCard( ) @ #b)) ⇒ (#a = #b)) ∧
     (Commit( B, P, <r, 'Bank', t> ) @ #i)) ⇒
    ((∃ #j. Running( P, B, <r, 'Bank', t> ) @ #j) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ B P r t #i.
  (Commit( B, P, <r, 'Bank', t> ) @ #i)
 ∧
  (∀ #a #b. (OneCard( ) @ #a) ∧ (OneCard( ) @ #b) ⇒ #a = #b) ∧
  (∀ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ⇒ ⊥) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
  case Bank_Commits_case_1
  solve( Bank_Commits( $Bank, $Terminal,
                       <~PAN, <'CDA', furtherData>, CVM, 
                        <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                       >,
                       channelID, ARPC
         ) ▶₀ #i )
    case Bank_Processes_CVM_NotOnlinePIN
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN, <'CDA', furtherData>, CVM, 
                             <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                            >,
                            'Null', channelID, ARPC
           ) ▶₀ #vr )
      case Bank_Receives_AC_case_1
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'NoPIN', 'HHMMSS'>, 
                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
             ) @ #vk.10 )
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.44 )
          case c_f
          solve( !KU( ~MK ) @ #vk.67 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'NoPIN', 'HHMMSS'>, 
                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
             ) @ #vk.10 )
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.55 )
          case c_f
          solve( !KU( ~MK ) @ #vk.78 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
             ) @ #vk.10 )
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.47 )
          case c_f
          solve( !KU( ~MK ) @ #vk.68 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_4
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
             ) @ #vk.10 )
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.58 )
          case c_f
          solve( !KU( ~MK ) @ #vk.79 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_5
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'NoPIN', 'HHMMSS'>, 
                       <'CDA', furtherData>, ATC, IAD>)
             ) @ #vk.10 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
               ) @ #vk.53 )
          case Card_Ext_Responds_To_Hello
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.66 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.56 )
              case Card_Ext_Responds_To_Hello
              solve( !KU( sign(<'05', nc.1, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'NoPIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.29 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                       ) @ #vk.89 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.60 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.95 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.98 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.98 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       x.1)
                             ) @ #vk.68 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.96 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        by solve( !Value( $amount, 'High' ) ▶₁ #i )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.83 )
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
          qed
        next
          case c_MAC
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( sign(<'05', nc.1, CID.1, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'NoPIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.25 )
              case Card_Responds_To_GenerateAC_CDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'NoPIN', 'HHMMSS'>, 
                             CID.1, ~ATC, 
                             MAC(f(~MK, ~ATC),
                                 <
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                             <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.92 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.59 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                    $furtherData>,
                                   ~privkBank)
                         ) @ #vk.65 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.97 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.100 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.100 )
                    case Compromise_CA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     x.1)
                           ) @ #vk.66 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.98 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      by solve( !Value( $amount, 'High' ) ▶₁ #i )
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
          qed
        qed
      next
        case Card_Responds_To_GenerateAC_NoCDA
        solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
               ) @ #vk.52 )
          case Card_Ext_Responds_To_Hello
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.67 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.53 )
              case Card_Ext_Responds_To_Hello
              solve( !KU( sign(<'05', nc, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'NoPIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.26 )
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                       ) @ #vk.90 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.57 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.64 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.96 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.99 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.99 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       x.1)
                             ) @ #vk.65 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.97 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        by solve( !Value( $amount, 'High' ) ▶₁ #i )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.84 )
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
          qed
        next
          case c_MAC
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( sign(<'05', nc, CID.1, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'NoPIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.22 )
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'NoPIN', 'HHMMSS'>, 
                             CID.1, ~ATC, 
                             MAC(f(~MK, ~ATC),
                                 <
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                             <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.93 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.56 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                    $furtherData>,
                                   ~privkBank)
                         ) @ #vk.62 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.98 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.101 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.101 )
                    case Compromise_CA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     x.1)
                           ) @ #vk.63 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.99 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      by solve( !Value( $amount, 'High' ) ▶₁ #i )
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.87 )
          qed
        qed
      next
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.56 )
          case c_f
          solve( !KU( ~MK ) @ #vk.75 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_6
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
             ) @ #vk.10 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
               ) @ #vk.55 )
          case Card_Ext_Responds_To_Hello
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.66 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.59 )
              case Card_Ext_Responds_To_Hello
              solve( !KU( sign(<'05', nc.1, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.31 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                       ) @ #vk.88 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.63 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.70 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.94 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.97 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.97 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       x.1)
                             ) @ #vk.71 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.95 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !Value( $amount, 'High' ) ▶₁ #i )
                          case Generate_Amount_High
                          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                            case Create_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.82 )
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
          qed
        next
          case c_MAC
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( sign(<'05', nc.1, CID.1, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.27 )
              case Card_Responds_To_GenerateAC_CDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             CID.1, ~ATC, 
                             MAC(f(~MK, ~ATC),
                                 <
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                             <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.91 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.62 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.68 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.96 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.99 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.99 )
                    case Compromise_CA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     x.1)
                           ) @ #vk.69 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.97 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !Value( $amount, 'High' ) ▶₁ #i )
                        case Generate_Amount_High
                        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                          case Create_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
          qed
        qed
      next
        case Card_Responds_To_GenerateAC_NoCDA
        solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
               ) @ #vk.54 )
          case Card_Ext_Responds_To_Hello
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.67 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.57 )
              case Card_Ext_Responds_To_Hello
              solve( !KU( sign(<'05', nc, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.30 )
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                       ) @ #vk.89 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.63 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.70 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.95 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.98 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.98 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       x.1)
                             ) @ #vk.71 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.96 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !Value( $amount, 'High' ) ▶₁ #i )
                          case Generate_Amount_High
                          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                            case Create_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.83 )
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
          qed
        next
          case c_MAC
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( sign(<'05', nc, CID.1, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.25 )
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'ODCVM', 'HHMMSS'>, 
                             CID.1, ~ATC, 
                             MAC(f(~MK, ~ATC),
                                 <
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                             <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.92 )
                case c_h
                solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.62 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                    'ODCVM', $furtherData>,
                                   ~privkBank)
                         ) @ #vk.68 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.97 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.100 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkCA ) @ #vk.100 )
                    case Compromise_CA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     x.1)
                           ) @ #vk.69 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.98 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !Value( $amount, 'High' ) ▶₁ #i )
                        case Generate_Amount_High
                        solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                          case Create_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
          qed
        qed
      next
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.59 )
          case c_f
          solve( !KU( ~MK ) @ #vk.76 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Bank_Processes_CVM_OnlinePIN
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                             <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                            >,
                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
           ) ▶₀ #vr )
      case Bank_Receives_AC_case_1
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'OnlinePIN', 'HHMMSS'>, 
                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
             ) @ #vk.10 )
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.45 )
          case c_f
          solve( !KU( ~MK ) @ #vk.66 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_2
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'OnlinePIN', 'HHMMSS'>, 
                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
             ) @ #vk.10 )
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.56 )
          case c_f
          solve( !KU( ~MK ) @ #vk.77 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Bank_Receives_AC_case_3
      solve( !KU( MAC(f(~MK, ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'OnlinePIN', 'HHMMSS'>, 
                       <'CDA', furtherData>, ATC, IAD>)
             ) @ #vk.10 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
               ) @ #vk.54 )
          case Card_Ext_Responds_To_Hello
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.65 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.58 )
              case Card_Ext_Responds_To_Hello
              solve( !KU( sign(<'05', nc.1, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.29 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                       ) @ #vk.88 )
                  case c_h
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                    $furtherData>,
                                   ~privkBank)
                         ) @ #vk.67 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.94 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.97 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.82 )
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
          qed
        next
          case c_MAC
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( sign(<'05', nc.1, CID.1, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.25 )
              case Card_Responds_To_GenerateAC_CDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'OnlinePIN', 'HHMMSS'>, 
                             CID.1, ~ATC, 
                             MAC(f(~MK, ~ATC),
                                 <
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                             <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.91 )
                case c_h
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                  $furtherData>,
                                 ~privkBank)
                       ) @ #vk.66 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( ~privkCard ) @ #vk.96 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.99 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
          qed
        qed
      next
        case Card_Responds_To_GenerateAC_NoCDA
        solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                        <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
               ) @ #vk.53 )
          case Card_Ext_Responds_To_Hello
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.66 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.56 )
              case Card_Ext_Responds_To_Hello
              solve( !KU( sign(<'05', nc, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.26 )
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                       ) @ #vk.89 )
                  case c_h
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                    $furtherData>,
                                   ~privkBank)
                         ) @ #vk.67 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.95 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.98 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.83 )
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
          qed
        next
          case c_MAC
          solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
            case Terminal_Ext_Sends_Hello
            solve( !KU( sign(<'05', nc, CID.1, 
                              MAC(f(~MK, ~ATC),
                                  <
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                              h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                              ~UN>,
                             x)
                   ) @ #vk.22 )
              case c_sign
              solve( !KU( h(<
                             <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                              'OnlinePIN', 'HHMMSS'>, 
                             CID.1, ~ATC, 
                             MAC(f(~MK, ~ATC),
                                 <
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                             <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                     ) @ #vk.92 )
                case c_h
                solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                  $furtherData>,
                                 ~privkBank)
                       ) @ #vk.66 )
                  case Card_Responds_To_ReadRecord_NotDDA
                  solve( !KU( ~privkCard ) @ #vk.97 )
                    case Compromise_Card
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~privkBank ) @ #vk.100 )
                    case Compromise_Bank
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_exp
            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
          qed
        qed
      next
        case c_MAC
        solve( !KU( f(~MK, ATC) ) @ #vk.57 )
          case c_f
          solve( !KU( ~MK ) @ #vk.74 )
            case Compromise_Bank_Card_ShK
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case Bank_Commits_case_2
  solve( Bank_Commits( $Bank, $Terminal,
                       <~PAN, <'CDA', furtherData>, CVM, 
                        <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                       >,
                       channelID, ARPC
         ) ▶₀ #i )
    case Bank_Processes_CVM_NotOnlinePIN
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN, <'CDA', furtherData>, CVM, 
                             <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                            >,
                            'Null', channelID, ARPC
           ) ▶₀ #vr )
      case Bank_Receives_AC_case_1
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_2
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_3
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_4
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_5
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_6
      by contradiction /* from formulas */
    qed
  next
    case Bank_Processes_CVM_OnlinePIN
    solve( Bank_Checked_AC( $Bank, $Terminal,
                            <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                             <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                            >,
                            aenc(~PIN, pk(~privkBank)), channelID, ARPC
           ) ▶₀ #vr )
      case Bank_Receives_AC_case_1
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_2
      by contradiction /* from formulas */
    next
      case Bank_Receives_AC_case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma auth_to_bank:
  all-traces
  "∀ B P r t #i.
    (Commit( B, P, <r, 'Bank', t> ) @ #i) ⇒
    (((∃ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ B2 P2 #i2.
          (Commit( B2, P2, <r, 'Bank', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ B P r t #i.
  (Commit( B, P, <r, 'Bank', t> ) @ #i)
 ∧
  (((∀ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∃ B2 P2 #i2. (Commit( B2, P2, <r, 'Bank', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( (∀ #j. (Running( P, B, <r, 'Bank', t> ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∃ B2 P2 #i2. (Commit( B2, P2, <r, 'Bank', t> ) @ #i2) ∧ ¬(#i2 = #i)) )
  case case_1
  solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
    case Bank_Commits_case_1
    solve( Bank_Commits( $Bank, $Terminal,
                         <~PAN, <'CDA', furtherData>, CVM, 
                          <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                         >,
                         channelID, ARPC
           ) ▶₀ #i )
      case Bank_Processes_CVM_NotOnlinePIN
      solve( Bank_Checked_AC( $Bank, $Terminal,
                              <~PAN, <'CDA', furtherData>, CVM, 
                               <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                              >,
                              'Null', channelID, ARPC
             ) ▶₀ #vr )
        case Bank_Receives_AC_case_1
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'NoPIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.44 )
            case c_f
            solve( !KU( ~MK ) @ #vk.67 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_2
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'NoPIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.55 )
            case c_f
            solve( !KU( ~MK ) @ #vk.78 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_3
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.47 )
            case c_f
            solve( !KU( ~MK ) @ #vk.68 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_4
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.58 )
            case c_f
            solve( !KU( ~MK ) @ #vk.79 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_5
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'NoPIN', 'HHMMSS'>, 
                         <'CDA', furtherData>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                 ) @ #vk.53 )
            case Card_Ext_Responds_To_Hello
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.57 )
                case Card_Ext_Responds_To_Hello
                solve( !KU( sign(<'05', nc.1, CID.1, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                  h(<
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     CID.1, ~ATC, 
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'NoPIN', 'HHMMSS'>, 
                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                     <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                  ~UN>,
                                 x)
                       ) @ #vk.29 )
                  case Card_Responds_To_GenerateAC_CDA
                  by contradiction /* from formulas */
                next
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'NoPIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.105 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.59 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       ~privkBank)
                             ) @ #vk.66 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.122 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       ~privkBank)
                             ) @ #vk.66 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.123 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       ~privkBank)
                             ) @ #vk.66 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.123 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.114 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                          'CDA', ODCVM, $furtherData>,
                                         x)
                               ) @ #vk.67 )
                          case c_sign
                          by solve( !Value( $amount, 'High' ) ▶₁ #i )
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'NoPIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.98 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.60 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       ~privkBank)
                             ) @ #vk.67 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.108 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.116 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       ~privkBank)
                             ) @ #vk.67 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.108 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.116 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       ~privkBank)
                             ) @ #vk.67 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.108 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.116 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.107 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                          $furtherData>,
                                         x.1)
                               ) @ #vk.68 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( ~privkCard ) @ #vk.107 )
                            case Compromise_Card
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_sign
                          by solve( !Value( $amount, 'High' ) ▶₁ #i )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            qed
          next
            case c_MAC
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( sign(<'05', nc.1, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'NoPIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.25 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.99 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.58 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                      'CDA', ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.64 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.115 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                      'CDA', ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.64 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.116 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                      'CDA', ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.64 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.116 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       x)
                             ) @ #vk.65 )
                        case c_sign
                        by solve( !Value( $amount, 'High' ) ▶₁ #i )
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.92 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.59 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.65 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.101 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.109 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.65 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.101 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.109 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.65 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.101 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.109 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.100 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       x.1)
                             ) @ #vk.66 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.100 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        by solve( !Value( $amount, 'High' ) ▶₁ #i )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                 ) @ #vk.52 )
            case Card_Ext_Responds_To_Hello
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.54 )
                case Card_Ext_Responds_To_Hello
                solve( !KU( sign(<'05', nc, CID.1, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                  h(<
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     CID.1, ~ATC, 
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'NoPIN', 'HHMMSS'>, 
                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                     <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                  ~UN>,
                                 x)
                       ) @ #vk.26 )
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'NoPIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.106 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.56 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       ~privkBank)
                             ) @ #vk.63 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.123 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       ~privkBank)
                             ) @ #vk.63 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.124 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       ~privkBank)
                             ) @ #vk.63 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.124 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.115 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                          'CDA', ODCVM, $furtherData>,
                                         x)
                               ) @ #vk.64 )
                          case c_sign
                          by solve( !Value( $amount, 'High' ) ▶₁ #i )
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'NoPIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.99 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.57 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       ~privkBank)
                             ) @ #vk.64 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard.1 ) @ #vk.109 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.117 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       ~privkBank)
                             ) @ #vk.64 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.109 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.117 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       ~privkBank)
                             ) @ #vk.64 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard.1 ) @ #vk.109 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.117 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.108 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                          $furtherData>,
                                         x.1)
                               ) @ #vk.65 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( ~privkCard ) @ #vk.108 )
                            case Compromise_Card
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_sign
                          by solve( !Value( $amount, 'High' ) ▶₁ #i )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.93 )
            qed
          next
            case c_MAC
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( sign(<'05', nc, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'NoPIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'NoPIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'NoPIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.22 )
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.100 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.55 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'CDA', ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.61 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.116 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'CDA', ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.61 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.117 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'CDA', ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.61 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.117 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', ODCVM, $furtherData>,
                                       x)
                             ) @ #vk.62 )
                        case c_sign
                        by solve( !Value( $amount, 'High' ) ▶₁ #i )
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.93 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.56 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.62 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard.1 ) @ #vk.102 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.110 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.62 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.102 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.110 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.62 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard.1 ) @ #vk.102 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.110 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.101 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', ODCVM, 
                                        $furtherData>,
                                       x.1)
                             ) @ #vk.63 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.101 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        by solve( !Value( $amount, 'High' ) ▶₁ #i )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.87 )
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.56 )
            case c_f
            solve( !KU( ~MK ) @ #vk.75 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_6
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                 ) @ #vk.55 )
            case Card_Ext_Responds_To_Hello
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.60 )
                case Card_Ext_Responds_To_Hello
                solve( !KU( sign(<'05', nc.1, CID.1, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                  h(<
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     CID.1, ~ATC, 
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'ODCVM', 'HHMMSS'>, 
                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                     <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                  ~UN>,
                                 x)
                       ) @ #vk.31 )
                  case Card_Responds_To_GenerateAC_CDA
                  by contradiction /* from formulas */
                next
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.104 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.62 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.69 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.121 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.69 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.122 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.69 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.122 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.113 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                          'CDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.70 )
                          case c_sign
                          solve( !Value( $amount, 'High' ) ▶₁ #i )
                            case Generate_Amount_High
                            solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                              case Create_Bank
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.97 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.63 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.107 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.115 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.107 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.115 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.107 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.115 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.106 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                          'ODCVM', $furtherData>,
                                         x.1)
                               ) @ #vk.71 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( ~privkCard ) @ #vk.106 )
                            case Compromise_Card
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_sign
                          solve( !Value( $amount, 'High' ) ▶₁ #i )
                            case Generate_Amount_High
                            solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                              case Create_Bank
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            qed
          next
            case c_MAC
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( sign(<'05', nc.1, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.27 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.98 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.61 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                      'CDA', 'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.114 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                      'CDA', 'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.115 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                      'CDA', 'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.115 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.106 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       x)
                             ) @ #vk.68 )
                        case c_sign
                        solve( !Value( $amount, 'High' ) ▶₁ #i )
                          case Generate_Amount_High
                          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                            case Create_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.91 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.62 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.68 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.100 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.108 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.68 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.100 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.108 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.68 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.100 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.108 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.99 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       x.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.99 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !Value( $amount, 'High' ) ▶₁ #i )
                          case Generate_Amount_High
                          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                            case Create_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                 ) @ #vk.54 )
            case Card_Ext_Responds_To_Hello
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.58 )
                case Card_Ext_Responds_To_Hello
                solve( !KU( sign(<'05', nc, CID.1, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                  h(<
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     CID.1, ~ATC, 
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'ODCVM', 'HHMMSS'>, 
                                          <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                     <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                  ~UN>,
                                 x)
                       ) @ #vk.30 )
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.105 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.62 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.69 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.122 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.69 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.123 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.69 )
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.123 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.114 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                          'CDA', 'ODCVM', $furtherData>,
                                         x)
                               ) @ #vk.70 )
                          case c_sign
                          solve( !Value( $amount, 'High' ) ▶₁ #i )
                            case Generate_Amount_High
                            solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                              case Create_Bank
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'ODCVM', 'HHMMSS'>, 
                                      <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.98 )
                    case c_h
                    solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.63 )
                      case Card_Responds_To_ReadRecord_DDA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard.1 ) @ #vk.108 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.116 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_1
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.108 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.116 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case Card_Responds_To_ReadRecord_NotDDA_case_2
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       ~privkBank)
                             ) @ #vk.70 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard.1 ) @ #vk.108 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !KU( ~privkBank ) @ #vk.116 )
                          case Compromise_Bank
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkCA ) @ #vk.107 )
                        case Compromise_CA
                        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                          'ODCVM', $furtherData>,
                                         x.1)
                               ) @ #vk.71 )
                          case Card_Responds_To_ReadRecord_NotDDA
                          solve( !KU( ~privkCard ) @ #vk.107 )
                            case Compromise_Card
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_sign
                          solve( !Value( $amount, 'High' ) ▶₁ #i )
                            case Generate_Amount_High
                            solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                              case Create_Bank
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            qed
          next
            case c_MAC
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( sign(<'05', nc, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'ODCVM', 'HHMMSS'>, 
                                     <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'ODCVM', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'ODCVM', 'HHMMSS'>, 
                                        <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.25 )
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.99 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x), $CA.1>, ~privkCA) ) @ #vk.61 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'CDA', 'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.115 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'CDA', 'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.116 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                      'CDA', 'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.116 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                                        'CDA', 'ODCVM', $furtherData>,
                                       x)
                             ) @ #vk.68 )
                        case c_sign
                        solve( !Value( $amount, 'High' ) ▶₁ #i )
                          case Generate_Amount_High
                          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                            case Create_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.92 )
                  case c_h
                  solve( !KU( sign(<'02', $Bank, pk(x.1), $CA.1>, ~privkCA) ) @ #vk.62 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.68 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard.1 ) @ #vk.101 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.109 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_1
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.68 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.101 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.109 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA_case_2
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                      'ODCVM', $furtherData>,
                                     ~privkBank)
                           ) @ #vk.68 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard.1 ) @ #vk.101 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.109 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.100 )
                      case Compromise_CA
                      solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                                        'ODCVM', $furtherData>,
                                       x.1)
                             ) @ #vk.69 )
                        case Card_Responds_To_ReadRecord_NotDDA
                        solve( !KU( ~privkCard ) @ #vk.100 )
                          case Compromise_Card
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_sign
                        solve( !Value( $amount, 'High' ) ▶₁ #i )
                          case Generate_Amount_High
                          solve( !IssuingCA( $Bank, $CA ) ▶₂ #i )
                            case Create_Bank
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.59 )
            case c_f
            solve( !KU( ~MK ) @ #vk.76 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Bank_Processes_CVM_OnlinePIN
      solve( Bank_Checked_AC( $Bank, $Terminal,
                              <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                               <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                              >,
                              aenc(~PIN, pk(~privkBank)), channelID, ARPC
             ) ▶₀ #vr )
        case Bank_Receives_AC_case_1
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.45 )
            case c_f
            solve( !KU( ~MK ) @ #vk.66 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_2
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
               ) @ #vk.10 )
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.56 )
            case c_f
            solve( !KU( ~MK ) @ #vk.77 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Bank_Receives_AC_case_3
        solve( !KU( MAC(f(~MK, ATC),
                        <
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         <'CDA', furtherData>, ATC, IAD>)
               ) @ #vk.10 )
          case Card_Responds_To_GenerateAC_CDA
          solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                 ) @ #vk.54 )
            case Card_Ext_Responds_To_Hello
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.59 )
                case Card_Ext_Responds_To_Hello
                solve( !KU( sign(<'05', nc.1, CID.1, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                  h(<
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     CID.1, ~ATC, 
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'OnlinePIN', 'HHMMSS'>, 
                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                     <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                  ~UN>,
                                 x)
                       ) @ #vk.29 )
                  case Card_Responds_To_GenerateAC_CDA
                  by contradiction /* from formulas */
                next
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.104 )
                    case c_h
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, 'OnlinePIN', 
                                      'CDA', ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.66 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.113 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.97 )
                    case c_h
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.105 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.106 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            qed
          next
            case c_MAC
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( sign(<'05', nc.1, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.25 )
                case Card_Responds_To_GenerateAC_CDA
                by contradiction /* from formulas */
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.98 )
                  case c_h
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard.1), $Bank, 'OnlinePIN', 
                                    'CDA', ODCVM, $furtherData>,
                                   ~privkBank)
                         ) @ #vk.65 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.91 )
                  case c_h
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                    $furtherData>,
                                   ~privkBank)
                         ) @ #vk.66 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.98 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.99 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
            qed
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA
          solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                          <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                 ) @ #vk.53 )
            case Card_Ext_Responds_To_Hello
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( 'g'^~Card_Eph_Sk ) @ #vk.57 )
                case Card_Ext_Responds_To_Hello
                solve( !KU( sign(<'05', nc, CID.1, 
                                  MAC(f(~MK, ~ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                  h(<
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     CID.1, ~ATC, 
                                     MAC(f(~MK, ~ATC),
                                         <
                                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                           'OnlinePIN', 'HHMMSS'>, 
                                          <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                     <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>), 
                                  ~UN>,
                                 x)
                       ) @ #vk.26 )
                  case Card_Responds_To_InternalAuthenticate
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.105 )
                    case c_h
                    solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                                      ODCVM, $furtherData>,
                                     ~privkBank)
                           ) @ #vk.66 )
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.114 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( h(<
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 CID.1, ~ATC, 
                                 MAC(f(~MK, ~ATC),
                                     <
                                      <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                       'OnlinePIN', 'HHMMSS'>, 
                                      <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                 <'IAD', CID>, <'g'^~Terminal_Eph_Sk, 'g'^~Card_Eph_Sk>, t>)
                         ) @ #vk.98 )
                    case c_h
                    solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                      $furtherData>,
                                     ~privkBank)
                           ) @ #vk.67 )
                      case Card_Responds_To_ReadRecord_NotDDA
                      solve( !KU( ~privkCard ) @ #vk.106 )
                        case Compromise_Card
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_sign
                      solve( !KU( ~privkBank ) @ #vk.107 )
                        case Compromise_Bank
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case c_exp
                by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            qed
          next
            case c_MAC
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( sign(<'05', nc, CID.1, 
                                MAC(f(~MK, ~ATC),
                                    <
                                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                      'OnlinePIN', 'HHMMSS'>, 
                                     <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                h(<
                                   <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                    'OnlinePIN', 'HHMMSS'>, 
                                   CID.1, ~ATC, 
                                   MAC(f(~MK, ~ATC),
                                       <
                                        <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                         'OnlinePIN', 'HHMMSS'>, 
                                        <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                   <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                                ~UN>,
                               x)
                     ) @ #vk.22 )
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.99 )
                  case c_h
                  solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                                    ODCVM, $furtherData>,
                                   ~privkBank)
                         ) @ #vk.65 )
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( h(<
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               CID.1, ~ATC, 
                               MAC(f(~MK, ~ATC),
                                   <
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                               <'IAD', CID>, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
                       ) @ #vk.92 )
                  case c_h
                  solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', ODCVM, 
                                    $furtherData>,
                                   ~privkBank)
                         ) @ #vk.66 )
                    case Card_Responds_To_ReadRecord_NotDDA
                    solve( !KU( ~privkCard ) @ #vk.99 )
                      case Compromise_Card
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.100 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
            qed
          qed
        next
          case c_MAC
          solve( !KU( f(~MK, ATC) ) @ #vk.57 )
            case c_f
            solve( !KU( ~MK ) @ #vk.74 )
              case Compromise_Bank_Card_ShK
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Bank_Commits_case_2
    solve( Bank_Commits( $Bank, $Terminal,
                         <~PAN, <'CDA', furtherData>, CVM, 
                          <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                         >,
                         channelID, ARPC
           ) ▶₀ #i )
      case Bank_Processes_CVM_NotOnlinePIN
      solve( Bank_Checked_AC( $Bank, $Terminal,
                              <~PAN, <'CDA', furtherData>, CVM, 
                               <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                              >,
                              'Null', channelID, ARPC
             ) ▶₀ #vr )
        case Bank_Receives_AC_case_1
        by contradiction /* from formulas */
      next
        case Bank_Receives_AC_case_2
        by contradiction /* from formulas */
      next
        case Bank_Receives_AC_case_3
        by contradiction /* from formulas */
      next
        case Bank_Receives_AC_case_4
        by contradiction /* from formulas */
      next
        case Bank_Receives_AC_case_5
        by contradiction /* from formulas */
      next
        case Bank_Receives_AC_case_6
        by contradiction /* from formulas */
      qed
    next
      case Bank_Processes_CVM_OnlinePIN
      solve( Bank_Checked_AC( $Bank, $Terminal,
                              <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                               <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                              >,
                              aenc(~PIN, pk(~privkBank)), channelID, ARPC
             ) ▶₀ #vr )
        case Bank_Receives_AC_case_1
        by contradiction /* from formulas */
      next
        case Bank_Receives_AC_case_2
        by contradiction /* from formulas */
      next
        case Bank_Receives_AC_case_3
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case case_2
  solve( (#i2 < #i)  ∥ (#i < #i2) )
    case case_1
    solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
      case Bank_Commits_case_1
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'CDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                           >,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, CVM, 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                'Null', channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.44 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.67 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.55 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.78 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.47 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.68 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_4
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.58 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.79 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_5
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'NoPIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.52 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.56 )
              case c_f
              solve( !KU( ~MK ) @ #vk.75 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_6
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.58 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.56 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.59 )
              case c_f
              solve( !KU( ~MK ) @ #vk.76 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.66 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.56 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.77 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'OnlinePIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.57 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
              case c_f
              solve( !KU( ~MK ) @ #vk.74 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Commits_case_2
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'CDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                           >,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, CVM, 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                'Null', channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.44 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.67 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.55 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.78 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.47 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.68 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_4
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.58 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.79 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_5
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'NoPIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.52 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.56 )
              case c_f
              solve( !KU( ~MK ) @ #vk.75 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_6
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.58 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.56 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.59 )
              case c_f
              solve( !KU( ~MK ) @ #vk.76 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.66 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.56 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.77 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'OnlinePIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.57 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
              case c_f
              solve( !KU( ~MK ) @ #vk.74 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Commit( B, P, <r, 'Bank', t> ) @ #i )
      case Bank_Commits_case_1
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'CDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                           >,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, CVM, 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                'Null', channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.44 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.67 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.55 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.78 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.47 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.68 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_4
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.58 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.79 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_5
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'NoPIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.52 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.56 )
              case c_f
              solve( !KU( ~MK ) @ #vk.75 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_6
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.58 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.56 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.59 )
              case c_f
              solve( !KU( ~MK ) @ #vk.76 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.66 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Card', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.56 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.77 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'OnlinePIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.57 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Card', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
              case c_f
              solve( !KU( ~MK ) @ #vk.74 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Bank_Commits_case_2
      solve( Bank_Commits( $Bank, $Terminal,
                           <~PAN, <'CDA', furtherData>, CVM, 
                            <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                           >,
                           channelID, ARPC
             ) ▶₀ #i )
        case Bank_Processes_CVM_NotOnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, CVM, 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                'Null', channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.44 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.67 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'NoPIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'NoPIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'NoPIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'NoPIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'NoPIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.55 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.78 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'SDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.47 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.68 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_4
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'ODCVM', 'HHMMSS'>, 
                          ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'ODCVM', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'ODCVM', 'HHMMSS'>, 
                                  ATC, <'DDA', 'ODCVM', furtherData2>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'ODCVM', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'ODCVM', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.58 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.79 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_5
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'NoPIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'NoPIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'NoPIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'NoPIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'NoPIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.52 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'NoPIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'NoPIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'NoPIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.56 )
              case c_f
              solve( !KU( ~MK ) @ #vk.75 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_6
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'ODCVM', 'HHMMSS'>, 
                           <'CDA', 'ODCVM', furtherData2>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.58 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'ODCVM', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'ODCVM', 'HHMMSS'>, 
                                 <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'ODCVM', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'ODCVM', 'HHMMSS'>, 
                                         <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.56 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', 'ODCVM', $furtherData>, 'ODCVM', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'ODCVM', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'ODCVM', 'HHMMSS'>, 
                                                <'CDA', 'ODCVM', $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          'Null', channelID.1, ARPC
                         ) ▶₀ #vr.26 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.59 )
              case c_f
              solve( !KU( ~MK ) @ #vk.76 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Bank_Processes_CVM_OnlinePIN
        solve( Bank_Checked_AC( $Bank, $Terminal,
                                <~PAN, <'CDA', furtherData>, 'OnlinePIN', 
                                 <<amount, country, currency, date, type, UN>, CDOL1>, ATC, DH, t, AC, IAD
                                >,
                                aenc(~PIN, pk(~privkBank)), channelID, ARPC
               ) ▶₀ #vr )
          case Bank_Receives_AC_case_1
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'SDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'SDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.45 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.66 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_2
          solve( Commit( B2, P2,
                         <'Terminal', 'Bank', ~PAN, 
                          <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 'OnlinePIN', 
                          <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                           'OnlinePIN', 'HHMMSS'>, 
                          ATC, <'DDA', furtherData>, t, 
                          MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                          IAD>
                 ) @ #i2 )
            case Bank_Commits
            solve( Bank_Commits( $Bank.1, $Terminal.1,
                                 <~PAN, <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, 
                                  'OnlinePIN', 
                                  <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                   'OnlinePIN', 'HHMMSS'>, 
                                  ATC, <'DDA', furtherData>, t, 
                                  MAC(f(~MK, ATC),
                                      <
                                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                        'OnlinePIN', 'HHMMSS'>, 
                                       <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>), 
                                  IAD>,
                                 channelID.1, ARPC
                   ) ▶₀ #i2 )
              case Bank_Processes_CVM_NotOnlinePIN
              by contradiction /* from formulas */
            next
              case Bank_Processes_CVM_OnlinePIN
              solve( !KU( MAC(f(~MK, ATC),
                              <
                               <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                'OnlinePIN', 'HHMMSS'>, 
                               <'CDA', 'g'^~Terminal_Eph_Sk, 'CDA'^~Terminal_Eph_Sk>, ATC, IAD>)
                     ) @ #vk.10 )
                case c_MAC
                solve( !KU( f(~MK, ATC) ) @ #vk.56 )
                  case c_f
                  solve( !KU( ~MK ) @ #vk.77 )
                    case Compromise_Bank_Card_ShK
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Bank_Receives_AC_case_3
          solve( !KU( MAC(f(~MK, ATC),
                          <
                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                            'OnlinePIN', 'HHMMSS'>, 
                           <'CDA', furtherData>, ATC, IAD>)
                 ) @ #vk.10 )
            case Card_Responds_To_GenerateAC_CDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.57 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA
            solve( Commit( B2, P2,
                           <'Terminal', 'Bank', ~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                            <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                             'OnlinePIN', 'HHMMSS'>, 
                            ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                            MAC(f(~MK, ~ATC),
                                <
                                 <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                  'OnlinePIN', 'HHMMSS'>, 
                                 <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                            'IAD', CID>
                   ) @ #i2 )
              case Bank_Commits
              solve( Bank_Commits( $Bank.1, $Terminal.1,
                                   <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                    <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                     'OnlinePIN', 'HHMMSS'>, 
                                    ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                    MAC(f(~MK, ~ATC),
                                        <
                                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                                          'OnlinePIN', 'HHMMSS'>, 
                                         <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                    'IAD', CID>,
                                   channelID.1, ARPC
                     ) ▶₀ #i2 )
                case Bank_Processes_CVM_NotOnlinePIN
                by contradiction /* from formulas */
              next
                case Bank_Processes_CVM_OnlinePIN
                solve( !KU( MAC(kdf(Secret, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>)
                       ) @ #vk.55 )
                  case Card_Ext_Responds_To_Hello
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, 
                                           <'g'^~Card_Eph_Sk, 'g'^~Terminal_Eph_Sk, 
                                            'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk)>, 
                                           t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                next
                  case c_MAC
                  solve( Bank_Checked_AC( $Bank.1, $Terminal.1,
                                          <~PAN, <'CDA', ODCVM, $furtherData>, 'OnlinePIN', 
                                           <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                            'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                           ~ATC, <Card_Eph_Pk, 'g'^~Terminal_Eph_Sk, Secret>, t, 
                                           MAC(f(~MK, ~ATC),
                                               <
                                                <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 
                                                 'TVR', 'OnlinePIN', 'HHMMSS'>, 
                                                <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', CID>), 
                                           'IAD', CID>,
                                          aenc(~PIN, pk(~privkBank.1)), channelID.1, ARPC
                         ) ▶₀ #vr.27 )
                    case Bank_Receives_AC
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case c_MAC
            solve( !KU( f(~MK, ATC) ) @ #vk.57 )
              case c_f
              solve( !KU( ~MK ) @ #vk.74 )
                case Compromise_Bank_Card_ShK
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_MK:
  all-traces
  "∀ MK #i.
    (SecretMK( MK ) @ #i) ⇒
    ((¬(∃ #j. !KU( MK ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ MK #i.
  (SecretMK( MK ) @ #i)
 ∧
  (∃ #j. (!KU( MK ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( !LtkBank( $Bank, ~privkBank ) ▶₃ #i )
  case Create_Bank
  solve( !CertBank( $Bank, certBank ) ▶₄ #i )
    case Create_Bank
    solve( !IssuingCA( $Bank, $CA.1 ) ▶₅ #i )
      case Create_Bank
      solve( !KU( ~MK ) @ #j )
        case Compromise_Bank_Card_ShK
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma secrecy_privkCard:
  all-traces
  "∀ privkCard #i.
    (SecretPrivkCard( privkCard ) @ #i) ⇒
    ((¬(∃ #j. !KU( privkCard ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ privkCard #i.
  (SecretPrivkCard( privkCard ) @ #i)
 ∧
  (∃ #j. (!KU( privkCard ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Set_Records( ~PAN, ~expDate, $CA, certBank, SSAD, CVM ) ▶₀ #i )
  case Create_Card
  solve( !AIP( ~PAN, AIP ) ▶₂ #i )
    case Create_Card
    solve( !IssuingBank( ~PAN, $Bank.1 ) ▶₃ #i )
      case Create_Card
      solve( !LtkBank( $Bank, ~privkBank.1 ) ▶₄ #i )
        case Create_Bank
        solve( !KU( ~privkCard ) @ #j )
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma secrecy_PIN:
  all-traces
  "∀ PIN #i.
    (SecretPIN( PIN ) @ #i) ⇒
    ((¬(∃ #j. !KU( PIN ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PIN #i.
  (SecretPIN( PIN ) @ #i)
 ∧
  (∃ #j. (!KU( PIN ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Set_PIN( ~PAN, CVM, $CA, $Bank ) ▶₁ #i )
  case Create_Card
  by solve( !KU( ~PIN ) @ #j )
qed

lemma secrecy_PAN:
  all-traces
  "∀ PAN #i.
    (SecretPAN( PAN ) @ #i) ⇒
    ((¬(∃ #j. !KU( PAN ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PAN #i.
  (SecretPAN( PAN ) @ #i)
 ∧
  (∃ #j. (!KU( PAN ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( !LtkBank( $Bank, ~privkBank ) ▶₃ #i )
  case Create_Bank
  solve( !CertBank( $Bank, certBank ) ▶₄ #i )
    case Create_Bank
    solve( !IssuingCA( $Bank, $CA.1 ) ▶₅ #i )
      case Create_Bank
      solve( !KU( ~PAN ) @ #j )
        case Card_Responds_To_ReadRecord_DDA_case_1
        solve( splitEqs(1) )
          case split_case_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma secrecy_SIGMA:
  all-traces
  "∀ S #i.
    (Secret_Sigma( S ) @ #i) ⇒
    ((¬(∃ #j. !KU( S ) @ #j)) ∨
     (∃ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ S #i.
  (Secret_Sigma( S ) @ #i)
 ∧
  (∃ #j. (!KU( S ) @ #j)) ∧
  (∀ A #k. (Honest( A ) @ #i) ∧ (Compromise( A ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Secret_Sigma( S ) @ #i )
  case Terminal_Commits_ARQC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'ARQC',
                               <~PAN, <'CDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                <Card_Eph_Pk, Terminal_Eph_Pk, S>, t, AC, IAD>,
                               supportedCVM, ~channelID, t
         ) ▶₀ #i )
    case Terminal_Receives_AC_CDA_case_1
    solve( !KU( sign(<'05', nc, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'NoPIN', 'HHMMSS'>, 
                         'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'NoPIN', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData.1>, ~ATC, 'IAD', 'ARQC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.93 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.93 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.93 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           x)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.85 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.87 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.82 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.84 )
            qed
          qed
        qed
      next
        case c_MAC
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           x)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'NoPIN', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.66 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.40 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.121 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.128 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.121 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.128 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.93 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.93 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           x)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.91 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.121 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.105 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.121 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.105 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.95 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'NoPIN', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.56 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.68 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.68 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.68 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           x.1)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCA ) @ #vk.86 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.86 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.86 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.86 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.103 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   x.2)
                         ) @ #vk.112 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.92 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.103 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   x.2)
                         ) @ #vk.112 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.92 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_CDA_case_2
    solve( !KU( sign(<'05', nc, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'OnlinePIN', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData.1>, ~ATC, 'IAD', 'ARQC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.84 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.86 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.86 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.88 )
            qed
          qed
        qed
      next
        case c_MAC
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.102 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.102 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.102 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.89 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.89 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'OnlinePIN', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.71 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.40 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.98 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.97 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.97 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.95 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'OnlinePIN', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.61 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.72 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.72 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.72 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x.1)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCA ) @ #vk.86 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.89 )
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_CDA_case_3
    solve( !KU( sign(<'05', nc, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'OnlinePIN', 'HHMMSS'>, 
                         'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'OnlinePIN', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData.1>, ~ATC, 'IAD', 'ARQC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x)
                 ) @ #vk.47 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.84 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.86 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.86 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.88 )
            qed
          qed
        qed
      next
        case c_MAC
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.102 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.102 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.102 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x)
                 ) @ #vk.51 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.89 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.89 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.96 )
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'OnlinePIN', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.71 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.40 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.98 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.106 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.97 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.97 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.107 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x)
                 ) @ #vk.53 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.95 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'OnlinePIN', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.61 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.72 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.72 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.72 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'CDA', 
                            furtherData>,
                           x.1)
                 ) @ #vk.54 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCA ) @ #vk.86 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.89 )
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_CDA_case_4
    solve( !KU( sign(<'05', nc, 'ARQC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'ARQC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           x)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.84 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.86 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.83 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.85 )
            qed
          qed
        qed
      next
        case c_MAC
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.101 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.101 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.101 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           x)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.89 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.89 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'ODCVM', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.68 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.40 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.95 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           x)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.92 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.99 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.99 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.99 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.112 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.106 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.112 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.106 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'ODCVM', 'HHMMSS'>, 
                     'ARQC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.58 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.73 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.116 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.116 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.73 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.73 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           x.1)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCA ) @ #vk.87 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.82 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.89 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.89 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.87 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.87 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.87 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.104 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.116 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   x.2)
                         ) @ #vk.113 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.93 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.104 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.116 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   x.2)
                         ) @ #vk.113 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.93 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_1
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>, x)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~privkCA ) @ #vk.42 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkCA ) @ #vk.42 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_2
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.32 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         x)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.63 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         x.1)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.58 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.55 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_3
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.59 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.64 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.64 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.42 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.58 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.58 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.59 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.60 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.42 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.63 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.63 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.64 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.65 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.58 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.59 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.64 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.64 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>, x)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~privkCA ) @ #vk.43 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkCA ) @ #vk.47 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_4
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.59 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.64 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.64 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.42 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.58 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.58 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.59 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.60 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.42 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.63 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.63 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.64 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.65 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.58 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.59 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.41 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.64 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.64 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.59 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.60 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>, x)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~privkCA ) @ #vk.43 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkCA ) @ #vk.47 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkCA ) @ #vk.48 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_5
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.37 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.77 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.77 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.46 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.26 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.46 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.26 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         x)
               ) @ #vk.46 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.63 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.69 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.69 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.70 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.70 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.70 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.38 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.48 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         x.1)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.58 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.60 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.60 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.61 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.61 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.61 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_6
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.37 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.77 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.77 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.46 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.26 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.46 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.26 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.78 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.79 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         x)
               ) @ #vk.46 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.63 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.25 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.69 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.69 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.70 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.70 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.70 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA.1) ) @ #vk.38 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.48 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, 'OnlinePIN', 'DDA', 
                          Terminal_Eph_Pk, S>,
                         x.1)
               ) @ #vk.47 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.58 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.27 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.60 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.60 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.61 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.61 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.61 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_7
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.36 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.59 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.36 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.64 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.64 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.36 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.58 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.58 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.59 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.60 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.36 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.63 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.63 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.64 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.65 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                           <'ARC', ARPC>
                     ) ▶₂ #i )
                case Terminal_Bank_Network_case_1
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.36 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.59 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                  qed
                qed
              next
                case Terminal_Bank_Network_case_2
                solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                <'g'^~Terminal_Eph_Sk, 'CDA'>)
                       ) @ #vk.36 )
                  case c_MAC
                  solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.64 )
                    case Terminal_Ext_Sends_Hello
                    solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                           ) @ #vk.64 )
                      case c_kdf
                      solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.65 )
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.67 )
                      qed
                    qed
                  next
                    case c_exp
                    by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.66 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, x)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~privkCA ) @ #vk.42 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkCA ) @ #vk.42 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_8
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.32 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.75 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.55 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.80 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.80 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.81 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( Recv( $Bank, $Terminal, <~channelID, 'Mastercard', '2'>,
                               <'ARC', ARPC>
                         ) ▶₂ #i )
                    case Terminal_Bank_Network_case_1
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.76 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                      qed
                    qed
                  next
                    case Terminal_Bank_Network_case_2
                    solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                    <'g'^~Terminal_Eph_Sk, 'CDA'>)
                           ) @ #vk.54 )
                      case c_MAC
                      solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
                        case Terminal_Ext_Sends_Hello
                        solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                               ) @ #vk.81 )
                          case c_kdf
                          solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.82 )
                            case c_exp
                            by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
                          qed
                        qed
                      next
                        case c_exp
                        by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         x)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.63 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         x.1)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.58 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.55 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Terminal_Commits_TC
  solve( Terminal_Received_AC( $Terminal, $Bank, $CA, nc, 'TC',
                               <~PAN, <'CDA', furtherData>, CVM, 
                                <<$amount, country, currency, date, type, ~UN>, CDOL1>, ATC, 
                                <Card_Eph_Pk, Terminal_Eph_Pk, S>, t, AC, IAD>,
                               supportedCVM, ~channelID, t
         ) ▶₀ #i )
    case Terminal_Receives_AC_CDA_case_1
    solve( !KU( sign(<'05', nc, 'TC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'NoPIN', 'HHMMSS'>, 
                         'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'NoPIN', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData.1>, ~ATC, 'IAD', 'TC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.93 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.93 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.93 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           x)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.85 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.87 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.82 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.82 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.84 )
            qed
          qed
        qed
      next
        case c_MAC
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.98 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.98 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.100 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           x)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.90 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.90 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'NoPIN', 'HHMMSS'>, 
                     'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.66 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.40 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.121 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.128 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.121 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.128 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.93 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.93 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.3>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', furtherData>,
                           x)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.91 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.98 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.94 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.121 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.105 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.110 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.107 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.121 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.105 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.92 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.95 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'NoPIN', 'HHMMSS'>, 
                     'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.56 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.68 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.112 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.68 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.68 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.83 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.96 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.114 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.2>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.106 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.104 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.94 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            furtherData>,
                           x.1)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.85 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCA ) @ #vk.86 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.95 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.81 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.88 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.86 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.86 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.86 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.103 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   x.2)
                         ) @ #vk.112 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.92 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.103 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.114 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData.1>,
                                   x.2)
                         ) @ #vk.112 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.94 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.92 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.85 )
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_CDA_case_2
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_CDA_case_4
    solve( !KU( sign(<'05', nc, 'TC', AC, 
                      h(<
                         <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                          'ODCVM', 'HHMMSS'>, 
                         'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>), 
                      ~UN>,
                     x.1)
           ) @ #vk.9 )
      case Card_Responds_To_GenerateAC_CDA
      solve( !KU( MAC(f(~MK, ~ATC),
                      <
                       <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                        'ODCVM', 'HHMMSS'>, 
                       <'CDA', ODCVM, $furtherData>, ~ATC, 'IAD', 'TC'>)
             ) @ #vk.8 )
        case Card_Responds_To_GenerateAC_CDA
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.34 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.92 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.92 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           x)
                 ) @ #vk.45 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.84 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.84 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.86 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.83 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.83 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.85 )
            qed
          qed
        qed
      next
        case c_MAC
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.35 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.101 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.101 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.97 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.99 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.99 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.101 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           x)
                 ) @ #vk.48 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.89 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.89 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^(~Card_Eph_Sk*~Terminal_Eph_Sk) ) @ #j )
              case Card_Ext_Responds_To_Hello
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.91 )
            next
              case Terminal_Ext_Sends_Hello
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.91 )
            next
              case c_exp
              by solve( !KU( ~Card_Eph_Sk ) @ #vk.93 )
            qed
          qed
        qed
      qed
    next
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'ODCVM', 'HHMMSS'>, 
                     'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.68 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.40 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.95 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.103 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.122 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.131 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.119 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.116 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.129 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.103 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.107 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.94 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.108 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.106 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.105 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.104 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.123 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.133 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.121 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   ~privkBank.2)
                         ) @ #vk.132 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.120 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.117 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                    furtherData.2>,
                                   x)
                         ) @ #vk.130 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.118 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.115 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.102 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.104 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                            'CDA', 'ODCVM', furtherData2>,
                           x)
                 ) @ #vk.51 )
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.92 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.29 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.99 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.99 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.99 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.97 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.96 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.95 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.112 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.106 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.112 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.2)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.111 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.108 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.122 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.109 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.106 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.93 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.96 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( h(<
                     <<$amount, 'Switzerland', 'CHF', 'YYMMDD', 'Purchase', ~UN>, 'TVR', 
                      'ODCVM', 'HHMMSS'>, 
                     'TC', ATC, AC, IAD, <'g'^~Terminal_Eph_Sk, Card_Eph_Pk>, t>)
             ) @ #vk.58 )
        case c_h
        solve( !KU( sign(<'02', $Bank, pk(x.1), $CA>, ~privkCA) ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.73 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.116 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.116 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.114 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.125 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.113 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.123 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.111 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.73 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.100 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.98 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.110 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.108 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            qed
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           ~privkBank)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.87 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCard ) @ #vk.73 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.102 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.84 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkBank ) @ #vk.101 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkBank ) @ #vk.99 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkBank ) @ #vk.97 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                       ) @ #vk.115 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.127 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   ~privkBank.1)
                         ) @ #vk.126 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.109 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                    furtherData.1>,
                                   x.1)
                         ) @ #vk.124 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkBank ) @ #vk.107 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkBank ) @ #vk.105 )
                      case Compromise_Bank
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkBank ) @ #vk.95 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.97 )
            qed
          qed
        next
          case c_sign
          solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'CDA', 
                            'ODCVM', furtherData2>,
                           x.1)
                 ) @ #vk.52 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.86 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~privkCA ) @ #vk.87 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.94 )
            qed
          next
            case c_sign
            solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.82 )
              case Terminal_Ext_Sends_Hello
              solve( !KU( ~PAN ) @ #vk.30 )
                case Card_Ranging
                solve( !KU( ~privkCA ) @ #vk.84 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_1
                solve( !KU( ~privkCA ) @ #vk.89 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_CDA_case_2
                solve( !KU( ~privkCA ) @ #vk.89 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_1
                solve( !KU( ~privkCA ) @ #vk.87 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_2
                solve( !KU( ~privkCA ) @ #vk.87 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_GenerateAC_NoCDA_case_3
                solve( !KU( ~privkCA ) @ #vk.87 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_InternalAuthenticate
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_1
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_2
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_DDA_case_3
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_1
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_2
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_3
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_4
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA_case_5
                solve( !KU( ~privkCA ) @ #vk.85 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Bank_Card_ShK
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_CA
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Compromise_Card_case_1
                by contradiction /* from formulas */
              next
                case Compromise_Card_case_2
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Generate_ATC
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_1
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_GPO_case_2
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_1
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.104 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.116 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   x.2)
                         ) @ #vk.113 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.93 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case Terminal_Sends_InternalAuthenticate_case_2
                solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                       ) @ #vk.104 )
                  case Card_Responds_To_ReadRecord_DDA
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.116 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_1
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case Card_Responds_To_ReadRecord_NotDDA_case_2
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   ~privkBank.1)
                         ) @ #vk.115 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.96 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                    furtherData>,
                                   x.2)
                         ) @ #vk.113 )
                    case Card_Responds_To_ReadRecord_DDA
                    solve( !KU( ~privkCA ) @ #vk.95 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  next
                    case Card_Responds_To_ReadRecord_NotDDA
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    solve( !KU( ~privkCA ) @ #vk.93 )
                      case Compromise_CA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case fresh
                solve( !KU( ~privkCA ) @ #vk.83 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_exp
              by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.86 )
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_1
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>,
                       ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            by solve( !Value( $amount, 'High' ) ▶₁ #i )
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', Terminal_Eph_Pk, S>, x)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~privkCA ) @ #vk.42 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkCA ) @ #vk.42 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_2
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.32 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                by solve( !Value( $amount, 'High' ) ▶₁ #i )
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', Terminal_Eph_Pk, S>,
                         x)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.63 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          Terminal_Eph_Pk, S>,
                         x.1)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.58 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.55 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_3
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_4
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_5
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_6
    by contradiction /* from formulas */
  next
    case Terminal_Receives_AC_NoCDA_case_7
    solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.23 )
      case Card_Responds_To_ReadRecord_DDA
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                     ) @ #vk.36 )
                case c_MAC
                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                  case Terminal_Ext_Sends_Hello
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.59 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                    qed
                  qed
                next
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.75 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.69 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.68 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.66 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_1
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                     ) @ #vk.36 )
                case c_MAC
                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.58 )
                  case Terminal_Ext_Sends_Hello
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.58 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.59 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                    qed
                  qed
                next
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.60 )
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.54 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.73 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.83 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.61 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.59 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.52 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Card_Responds_To_ReadRecord_NotDDA_case_2
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, ~privkBank)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~PAN ) @ #vk.15 )
          case Card_Responds_To_ReadRecord_NotDDA
          solve( !KU( ~expDate.1 ) @ #vk.19 )
            case Card_Responds_To_ReadRecord_NotDDA
            solve( !Value( $amount, 'High' ) ▶₁ #i )
              case Generate_Amount_High
              solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                              <'g'^~Terminal_Eph_Sk, 'CDA'>)
                     ) @ #vk.36 )
                case c_MAC
                solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.59 )
                  case Terminal_Ext_Sends_Hello
                  solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                         ) @ #vk.59 )
                    case c_kdf
                    solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.60 )
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.62 )
                    qed
                  qed
                next
                  case c_exp
                  by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.61 )
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkBank ) @ #vk.57 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkBank ) @ #vk.56 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkBank ) @ #vk.55 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x), $CA.1>, ~privkCA.1) ) @ #vk.74 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.65 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.63 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             ~privkBank.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.64 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                              furtherData.1>,
                             x)
                   ) @ #vk.84 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkBank ) @ #vk.62 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkBank ) @ #vk.60 )
                case Compromise_Bank
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkBank ) @ #vk.53 )
            case Compromise_Bank
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'03', ~PAN, expDate, 'SDA', 'ODCVM', S>, x)
             ) @ #vk.26 )
        case Card_Responds_To_ReadRecord_NotDDA
        solve( !KU( ~privkCA ) @ #vk.42 )
          case Compromise_CA
          by contradiction /* from formulas */
        qed
      next
        case c_sign
        solve( !KU( ~PAN ) @ #vk.16 )
          case Card_Ranging
          solve( !KU( ~privkCA ) @ #vk.42 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_1
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_CDA_case_2
          solve( !KU( ~privkCA ) @ #vk.45 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_GenerateAC_NoCDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_InternalAuthenticate
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_1
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_2
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_DDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_1
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_2
          solve( !KU( ~privkCA ) @ #vk.44 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_3
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_4
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA_case_5
          solve( !KU( ~privkCA ) @ #vk.43 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Bank_Card_ShK
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_CA
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Compromise_Card_case_1
          by contradiction /* from formulas */
        next
          case Compromise_Card_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Generate_ATC
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_1
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_GPO_case_2
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_1
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Terminal_Sends_InternalAuthenticate_case_2
          solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                 ) @ #vk.63 )
            case Card_Responds_To_ReadRecord_DDA
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.52 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             ~privkBank.1)
                   ) @ #vk.75 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.51 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                              furtherData>,
                             x.1)
                   ) @ #vk.73 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( ~privkCA ) @ #vk.50 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~privkCA ) @ #vk.48 )
                case Compromise_CA
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case fresh
          solve( !KU( ~privkCA ) @ #vk.41 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Terminal_Receives_AC_NoCDA_case_8
    solve( !KU( sign(<'05', nc, ~UN>, x.1) ) @ #vk.11 )
      case Card_Responds_To_InternalAuthenticate
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.32 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.55 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.75 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.55 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.75 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.58 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.55 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.75 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.55 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.75 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.75 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.76 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.77 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.73 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.92 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.101 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.89 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.86 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.99 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.71 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~UN ) @ #vk.57 )
              case Terminal_Sends_GPO
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            next
              case Terminal_Sends_InternalAuthenticate
              solve( !KU( ~nc ) @ #vk.27 )
                case Card_Responds_To_InternalAuthenticate
                solve( !Value( $amount, 'High' ) ▶₁ #i )
                  case Generate_Amount_High
                  solve( !KU( MAC(kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER'),
                                  <'g'^~Terminal_Eph_Sk, 'CDA'>)
                         ) @ #vk.54 )
                    case c_MAC
                    solve( !KU( 'g'^~Terminal_Eph_Sk ) @ #vk.76 )
                      case Terminal_Ext_Sends_Hello
                      solve( !KU( kdf('CDA'^~Terminal_Eph_Sk, 'MAC_CARD_TO_READER')
                             ) @ #vk.76 )
                        case c_kdf
                        solve( !KU( 'CDA'^~Terminal_Eph_Sk ) @ #vk.77 )
                          case c_exp
                          by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.79 )
                        qed
                      qed
                    next
                      case c_exp
                      by solve( !KU( ~Terminal_Eph_Sk ) @ #vk.78 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.76 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.75 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.74 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x), $CA.2>, ~privkCA.2) ) @ #vk.93 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.103 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.91 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               ~privkBank.2)
                     ) @ #vk.102 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.90 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.87 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.3, pubkCard, $Bank.2, CVM.2, 'DDA', 
                                furtherData.2>,
                               x)
                     ) @ #vk.100 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.88 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.72 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(~privkCard), $Bank, supportedCVM, 
                          'DDA', 'ODCVM', S>,
                         x)
               ) @ #vk.41 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.63 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.20 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.67 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.66 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.65 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.2, pk(x.1), $CA.2>, ~privkCA.2)
                   ) @ #vk.85 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.82 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.2)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.81 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.78 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.2, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.92 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.79 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.76 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.63 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( sign(<'02', $Bank, pk(x), $CA>, ~privkCA) ) @ #vk.33 )
        case Card_Responds_To_ReadRecord_DDA
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.43 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.57 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.67 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.86 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.95 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.83 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.80 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.93 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.78 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.65 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_1
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Card_Responds_To_ReadRecord_NotDDA_case_2
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         ~privkBank)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCard ) @ #vk.56 )
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkBank ) @ #vk.70 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkBank ) @ #vk.69 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkBank ) @ #vk.68 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.1), $CA.1>, ~privkCA.1)
                   ) @ #vk.87 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.97 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.85 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               ~privkBank.1)
                     ) @ #vk.96 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.84 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.81 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.2, pubkCard, $Bank.1, CVM.1, 'DDA', 
                                furtherData.1>,
                               x.1)
                     ) @ #vk.94 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkBank ) @ #vk.82 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkBank ) @ #vk.79 )
                  case Compromise_Bank
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkBank ) @ #vk.66 )
              case Compromise_Bank
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( sign(<'04', ~PAN, pk(x), $Bank, supportedCVM, 'DDA', 
                          'ODCVM', S>,
                         x.1)
               ) @ #vk.42 )
          case Card_Responds_To_ReadRecord_DDA
          solve( !KU( ~privkCA ) @ #vk.58 )
            case Compromise_CA
            by contradiction /* from formulas */
          qed
        next
          case Card_Responds_To_ReadRecord_NotDDA
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~PAN ) @ #vk.22 )
            case Card_Ranging
            solve( !KU( ~privkCA ) @ #vk.55 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_1
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_CDA_case_2
            solve( !KU( ~privkCA ) @ #vk.58 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_GenerateAC_NoCDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_InternalAuthenticate
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_1
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_2
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_DDA_case_3
            solve( !KU( ~privkCA ) @ #vk.57 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_1
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_2
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_3
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_4
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Card_Responds_To_ReadRecord_NotDDA_case_5
            solve( !KU( ~privkCA ) @ #vk.56 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Bank_Card_ShK
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_CA
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Compromise_Card_case_1
            by contradiction /* from formulas */
          next
            case Compromise_Card_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Generate_ATC
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_1
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_GPO_case_2
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_1
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Terminal_Sends_InternalAuthenticate_case_2
            solve( !KU( sign(<'02', $Bank.1, pk(x.2), $CA.1>, ~privkCA.1)
                   ) @ #vk.76 )
              case Card_Responds_To_ReadRecord_DDA
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.86 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.72 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_1
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case Card_Responds_To_ReadRecord_NotDDA_case_2
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               ~privkBank.1)
                     ) @ #vk.85 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.71 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.69 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( sign(<'04', ~PAN.1, pubkCard, $Bank.1, CVM, 'DDA', 
                                furtherData>,
                               x.2)
                     ) @ #vk.83 )
                case Card_Responds_To_ReadRecord_DDA
                solve( !KU( ~privkCA ) @ #vk.70 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              next
                case Card_Responds_To_ReadRecord_NotDDA
                by contradiction /* from formulas */
              next
                case c_sign
                solve( !KU( ~privkCA ) @ #vk.67 )
                  case Compromise_CA
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case fresh
            solve( !KU( ~privkCA ) @ #vk.54 )
              case Compromise_CA
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

































/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 3.1
Git revision: f172d7f00b1485446a1e7a42dc14623c2189cc42, branch: master
Compiled at: 2023-08-31 10:43:56.765388839 UTC
*/

end